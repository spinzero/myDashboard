{"remainingRequest":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/toolbar.es5.js","dependencies":[{"path":"/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/toolbar.es5.js","mtime":499162500000},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/cache-loader/dist/cjs.js","mtime":1535911065030},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START tslib,_angular_core,_angular_material_core,_angular_cdk_platform,_angular_common PURE_IMPORTS_END */\nimport { __extends } from 'tslib';\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, isDevMode, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */ MatToolbarBase = /** @class */ /*@__PURE__*/ (function () {\n    function MatToolbarBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatToolbarBase;\n}());\nvar /** @type {?} */ _MatToolbarMixinBase = /*@__PURE__*/ mixinColor(MatToolbarBase);\nvar MatToolbarRow = /** @class */ /*@__PURE__*/ (function () {\n    function MatToolbarRow() {\n    }\n    return MatToolbarRow;\n}());\nvar MatToolbar = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatToolbar, _super);\n    function MatToolbar(elementRef, _platform, document) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        // TODO: make the document a required param when doing breaking changes.\n        _this._document = document;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MatToolbar.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!isDevMode() || !this._platform.isBrowser) {\n                return;\n            }\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(function () { return _this._checkToolbarMixedModes(); });\n        };\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @return {?}\n     */\n    MatToolbar.prototype._checkToolbarMixedModes = /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this._toolbarRows.length) {\n                return;\n            }\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            var /** @type {?} */ isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n                .filter(function (node) { return !(node.classList && node.classList.contains('mat-toolbar-row')); })\n                .filter(function (node) { return node.nodeType !== (_this._document ? _this._document.COMMENT_NODE : 8); })\n                .some(function (node) { return node.textContent.trim(); });\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        };\n    return MatToolbar;\n}(_MatToolbarMixinBase));\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatToolbarModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatToolbarModule() {\n    }\n    return MatToolbarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MatToolbarModule, MatToolbarBase, _MatToolbarMixinBase, MatToolbarRow, MatToolbar, throwToolbarMixedModesError };\n\n\n\n",{"version":3,"file":"/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/toolbar.es5.js.post-build-optimizer.js","sourceRoot":"","sources":["/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/toolbar.es5.js.pre-build-optimizer.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, isDevMode, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nvar  /**\n * \\@docs-private\n */\nMatToolbarBase = /** @class */ (function () {\n    function MatToolbarBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatToolbarBase;\n}());\nvar /** @type {?} */ _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nvar MatToolbarRow = /** @class */ (function () {\n    function MatToolbarRow() {\n    }\n    MatToolbarRow.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-toolbar-row',\n                    exportAs: 'matToolbarRow',\n                    host: { 'class': 'mat-toolbar-row' },\n                },] },\n    ];\n    return MatToolbarRow;\n}());\nvar MatToolbar = /** @class */ (function (_super) {\n    __extends(MatToolbar, _super);\n    function MatToolbar(elementRef, _platform, document) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        // TODO: make the document a required param when doing breaking changes.\n        _this._document = document;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MatToolbar.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!isDevMode() || !this._platform.isBrowser) {\n            return;\n        }\n        this._checkToolbarMixedModes();\n        this._toolbarRows.changes.subscribe(function () { return _this._checkToolbarMixedModes(); });\n    };\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @return {?}\n     */\n    MatToolbar.prototype._checkToolbarMixedModes = /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._toolbarRows.length) {\n            return;\n        }\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        var /** @type {?} */ isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n            .filter(function (node) { return !(node.classList && node.classList.contains('mat-toolbar-row')); })\n            .filter(function (node) { return node.nodeType !== (_this._document ? _this._document.COMMENT_NODE : 8); })\n            .some(function (node) { return node.textContent.trim(); });\n        if (isCombinedUsage) {\n            throwToolbarMixedModesError();\n        }\n    };\n    MatToolbar.decorators = [\n        { type: Component, args: [{selector: 'mat-toolbar',\n                    exportAs: 'matToolbar',\n                    template: \"<ng-content></ng-content><ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\",\n                    styles: [\"@media screen and (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\"],\n                    inputs: ['color'],\n                    host: {\n                        'class': 'mat-toolbar',\n                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatToolbar.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Platform, },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    MatToolbar.propDecorators = {\n        \"_toolbarRows\": [{ type: ContentChildren, args: [MatToolbarRow,] },],\n    };\n    return MatToolbar;\n}(_MatToolbarMixinBase));\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatToolbarModule = /** @class */ (function () {\n    function MatToolbarModule() {\n    }\n    MatToolbarModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                    declarations: [MatToolbar, MatToolbarRow],\n                },] },\n    ];\n    return MatToolbarModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatToolbarModule, MatToolbarBase, _MatToolbarMixinBase, MatToolbarRow, MatToolbar, throwToolbarMixedModesError };\n//# sourceMappingURL=toolbar.es5.js.map\n"]}]}