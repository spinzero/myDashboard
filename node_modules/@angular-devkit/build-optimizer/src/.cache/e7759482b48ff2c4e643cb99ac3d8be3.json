{"remainingRequest":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/delay-response.js","dependencies":[{"path":"/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/delay-response.js","mtime":1532392197000},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/cache-loader/dist/cjs.js","mtime":1535911065030},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Observable } from 'rxjs';\n// Replaces use of RxJS delay. See v0.5.4.\n/** adds specified delay (in ms) to both next and error channels of the response observable */\nexport function delayResponse(response$, delayMs) {\n    return new Observable(function (observer) {\n        var completePending = false;\n        var nextPending = false;\n        var subscription = response$.subscribe(function (value) {\n            nextPending = true;\n            setTimeout(function () {\n                observer.next(value);\n                if (completePending) {\n                    observer.complete();\n                }\n            }, delayMs);\n        }, function (error) { return setTimeout(function () { return observer.error(error); }, delayMs); }, function () {\n            completePending = true;\n            if (!nextPending) {\n                observer.complete();\n            }\n        });\n        return function () {\n            return subscription.unsubscribe();\n        };\n    });\n}\n\n\n\n",{"version":3,"file":"/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/delay-response.js.post-build-optimizer.js","sourceRoot":"","sources":["/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/delay-response.js.pre-build-optimizer.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,0CAA0C;AAC1C,8FAA8F;AAC9F,MAAM,wBAAwB,SAAS,EAAE,OAAO;IAC5C,OAAO,IAAI,UAAU,CAAC,UAAU,QAAQ;QACpC,IAAI,eAAe,GAAG,KAAK,CAAC;QAC5B,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,UAAU,KAAK;YAClD,WAAW,GAAG,IAAI,CAAC;YACnB,UAAU,CAAC;gBACP,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrB,IAAI,eAAe,EAAE;oBACjB,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACvB;YACL,CAAC,EAAE,OAAO,CAAC,CAAC;QAChB,CAAC,EAAE,UAAU,KAAK,IAAI,OAAO,UAAU,CAAC,cAAc,OAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YAChG,eAAe,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,WAAW,EAAE;gBACd,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACvB;QACL,CAAC,CAAC,CAAC;QACH,OAAO;YACH,OAAO,YAAY,CAAC,WAAW,EAAE,CAAC;QACtC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AACP,CAAC;AACD,0CAA0C","sourcesContent":["import { Observable } from 'rxjs';\n// Replaces use of RxJS delay. See v0.5.4.\n/** adds specified delay (in ms) to both next and error channels of the response observable */\nexport function delayResponse(response$, delayMs) {\n    return new Observable(function (observer) {\n        var completePending = false;\n        var nextPending = false;\n        var subscription = response$.subscribe(function (value) {\n            nextPending = true;\n            setTimeout(function () {\n                observer.next(value);\n                if (completePending) {\n                    observer.complete();\n                }\n            }, delayMs);\n        }, function (error) { return setTimeout(function () { return observer.error(error); }, delayMs); }, function () {\n            completePending = true;\n            if (!nextPending) {\n                observer.complete();\n            }\n        });\n        return function () {\n            return subscription.unsubscribe();\n        };\n    });\n}\n//# sourceMappingURL=delay-response.js.map"]}]}