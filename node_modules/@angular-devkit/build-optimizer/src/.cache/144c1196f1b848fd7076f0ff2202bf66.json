{"remainingRequest":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/backend.service.js","dependencies":[{"path":"/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/backend.service.js","mtime":1532392197000},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/cache-loader/dist/cjs.js","mtime":1535911065030},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Observable, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nvar /**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */ BackendService = /** @class */ (function () {\n    function BackendService(inMemDbService, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        this.inMemDbService = inMemDbService;\n        this.config = new InMemoryBackendConfig();\n        this.requestInfoUtils = this.getRequestInfoUtils();\n        var loc = this.getLocation('/');\n        this.config.host = loc.host; // default to app web server host\n        this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n        Object.assign(this.config, config);\n    }\n    Object.defineProperty(BackendService.prototype, \"dbReady\", {\n        ////  protected /////\n        get: function () {\n            if (!this.dbReadySubject) {\n                // first time the service is called.\n                this.dbReadySubject = new BehaviorSubject(false);\n                this.resetDb();\n            }\n            return this.dbReadySubject.asObservable().pipe(first(function (r) { return r; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Process Request and return an Observable of Http Response object\n     * in the manner of a RESTy web api.\n     *\n     * Expect URI pattern in the form :base/:collectionName/:id?\n     * Examples:\n     *   // for store with a 'customers' collection\n     *   GET api/customers          // all customers\n     *   GET api/customers/42       // the character with id=42\n     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n     *   GET api/customers.json/42  // ignores the \".json\"\n     *\n     * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n     * Examples:\n     *     POST commands/resetDb,\n     *     GET/POST commands/config - get or (re)set the config\n     *\n     *   HTTP overrides:\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\n     *     The request is forwarded to that method as in\n     *     `inMemDbService.get(requestInfo)`\n     *     which must return either an Observable of the response type\n     *     for this http library or null|undefined (which means \"keep processing\").\n     */\n    /**\n       * Process Request and return an Observable of Http Response object\n       * in the manner of a RESTy web api.\n       *\n       * Expect URI pattern in the form :base/:collectionName/:id?\n       * Examples:\n       *   // for store with a 'customers' collection\n       *   GET api/customers          // all customers\n       *   GET api/customers/42       // the character with id=42\n       *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n       *   GET api/customers.json/42  // ignores the \".json\"\n       *\n       * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n       * Examples:\n       *     POST commands/resetDb,\n       *     GET/POST commands/config - get or (re)set the config\n       *\n       *   HTTP overrides:\n       *     If the injected inMemDbService defines an HTTP method (lowercase)\n       *     The request is forwarded to that method as in\n       *     `inMemDbService.get(requestInfo)`\n       *     which must return either an Observable of the response type\n       *     for this http library or null|undefined (which means \"keep processing\").\n       */\n    BackendService.prototype.handleRequest = /**\n       * Process Request and return an Observable of Http Response object\n       * in the manner of a RESTy web api.\n       *\n       * Expect URI pattern in the form :base/:collectionName/:id?\n       * Examples:\n       *   // for store with a 'customers' collection\n       *   GET api/customers          // all customers\n       *   GET api/customers/42       // the character with id=42\n       *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n       *   GET api/customers.json/42  // ignores the \".json\"\n       *\n       * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n       * Examples:\n       *     POST commands/resetDb,\n       *     GET/POST commands/config - get or (re)set the config\n       *\n       *   HTTP overrides:\n       *     If the injected inMemDbService defines an HTTP method (lowercase)\n       *     The request is forwarded to that method as in\n       *     `inMemDbService.get(requestInfo)`\n       *     which must return either an Observable of the response type\n       *     for this http library or null|undefined (which means \"keep processing\").\n       */\n        function (req) {\n            var _this = this;\n            //  handle the request when there is an in-memory database\n            return this.dbReady.pipe(concatMap(function () { return _this.handleRequest_(req); }));\n        };\n    BackendService.prototype.handleRequest_ = function (req) {\n        var _this = this;\n        var url = req.urlWithParams ? req.urlWithParams : req.url;\n        // Try override parser\n        // If no override parser or it returns nothing, use default parser\n        var parser = this.bind('parseRequestUrl');\n        var parsed = (parser && parser(url, this.requestInfoUtils)) ||\n            this.parseRequestUrl(url);\n        var collectionName = parsed.collectionName;\n        var collection = this.db[collectionName];\n        var reqInfo = {\n            req: req,\n            apiBase: parsed.apiBase,\n            collection: collection,\n            collectionName: collectionName,\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n            id: this.parseId(collection, collectionName, parsed.id),\n            method: this.getRequestMethod(req),\n            query: parsed.query,\n            resourceUrl: parsed.resourceUrl,\n            url: url,\n            utils: this.requestInfoUtils\n        };\n        var resOptions;\n        if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n            return this.commands(reqInfo);\n        }\n        var methodInterceptor = this.bind(reqInfo.method);\n        if (methodInterceptor) {\n            // InMemoryDbService intercepts this HTTP method.\n            // if interceptor produced a response, return it.\n            // else InMemoryDbService chose not to intercept; continue processing.\n            var interceptorResponse = methodInterceptor(reqInfo);\n            if (interceptorResponse) {\n                return interceptorResponse;\n            }\n            ;\n        }\n        if (this.db[collectionName]) {\n            // request is for a known collection of the InMemoryDbService\n            return this.createResponse$(function () { return _this.collectionHandler(reqInfo); });\n        }\n        if (this.config.passThruUnknownUrl) {\n            // unknown collection; pass request thru to a \"real\" backend.\n            return this.getPassThruBackend().handle(req);\n        }\n        // 404 - can't handle this request\n        resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\n        return this.createResponse$(function () { return resOptions; });\n    };\n    /**\n     * Add configured delay to response observable unless delay === 0\n     */\n    /**\n       * Add configured delay to response observable unless delay === 0\n       */\n    BackendService.prototype.addDelay = /**\n       * Add configured delay to response observable unless delay === 0\n       */\n        function (response) {\n            var d = this.config.delay;\n            return d === 0 ? response : delayResponse(response, d || 500);\n        };\n    /**\n     * Apply query/search parameters as a filter over the collection\n     * This impl only supports RegExp queries on string properties of the collection\n     * ANDs the conditions together\n     */\n    /**\n       * Apply query/search parameters as a filter over the collection\n       * This impl only supports RegExp queries on string properties of the collection\n       * ANDs the conditions together\n       */\n    BackendService.prototype.applyQuery = /**\n       * Apply query/search parameters as a filter over the collection\n       * This impl only supports RegExp queries on string properties of the collection\n       * ANDs the conditions together\n       */\n        function (collection, query) {\n            // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n            var conditions = [];\n            var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n            query.forEach(function (value, name) {\n                value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), caseSensitive) }); });\n            });\n            var len = conditions.length;\n            if (!len) {\n                return collection;\n            }\n            // AND the RegExp conditions\n            return collection.filter(function (row) {\n                var ok = true;\n                var i = len;\n                while (ok && i) {\n                    i -= 1;\n                    var cond = conditions[i];\n                    ok = cond.rx.test(row[cond.name]);\n                }\n                return ok;\n            });\n        };\n    /**\n     * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n     */\n    /**\n       * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n       */\n    BackendService.prototype.bind = /**\n       * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n       */\n        function (methodName) {\n            var fn = this.inMemDbService[methodName];\n            return fn ? fn.bind(this.inMemDbService) : undefined;\n        };\n    BackendService.prototype.bodify = function (data) {\n        return this.config.dataEncapsulation ? { data: data } : data;\n    };\n    BackendService.prototype.clone = function (data) {\n        return JSON.parse(JSON.stringify(data));\n    };\n    BackendService.prototype.collectionHandler = function (reqInfo) {\n        // const req = reqInfo.req;\n        var resOptions;\n        switch (reqInfo.method) {\n            case 'get':\n                resOptions = this.get(reqInfo);\n                break;\n            case 'post':\n                resOptions = this.post(reqInfo);\n                break;\n            case 'put':\n                resOptions = this.put(reqInfo);\n                break;\n            case 'delete':\n                resOptions = this.delete(reqInfo);\n                break;\n            default:\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n                break;\n        }\n        // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n        var interceptor = this.bind('responseInterceptor');\n        return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n    };\n    /**\n     * Commands reconfigure the in-memory web api service or extract information from it.\n     * Commands ignore the latency delay and respond ASAP.\n     *\n     * When the last segment of the `apiBase` path is \"commands\",\n     * the `collectionName` is the command.\n     *\n     * Example URLs:\n     *   commands/resetdb (POST) // Reset the \"database\" to its original state\n     *   commands/config (GET)   // Return this service's config object\n     *   commands/config (POST)  // Update the config (e.g. the delay)\n     *\n     * Usage:\n     *   http.post('commands/resetdb', undefined);\n     *   http.get('commands/config');\n     *   http.post('commands/config', '{\"delay\":1000}');\n     */\n    /**\n       * Commands reconfigure the in-memory web api service or extract information from it.\n       * Commands ignore the latency delay and respond ASAP.\n       *\n       * When the last segment of the `apiBase` path is \"commands\",\n       * the `collectionName` is the command.\n       *\n       * Example URLs:\n       *   commands/resetdb (POST) // Reset the \"database\" to its original state\n       *   commands/config (GET)   // Return this service's config object\n       *   commands/config (POST)  // Update the config (e.g. the delay)\n       *\n       * Usage:\n       *   http.post('commands/resetdb', undefined);\n       *   http.get('commands/config');\n       *   http.post('commands/config', '{\"delay\":1000}');\n       */\n    BackendService.prototype.commands = /**\n       * Commands reconfigure the in-memory web api service or extract information from it.\n       * Commands ignore the latency delay and respond ASAP.\n       *\n       * When the last segment of the `apiBase` path is \"commands\",\n       * the `collectionName` is the command.\n       *\n       * Example URLs:\n       *   commands/resetdb (POST) // Reset the \"database\" to its original state\n       *   commands/config (GET)   // Return this service's config object\n       *   commands/config (POST)  // Update the config (e.g. the delay)\n       *\n       * Usage:\n       *   http.post('commands/resetdb', undefined);\n       *   http.get('commands/config');\n       *   http.post('commands/config', '{\"delay\":1000}');\n       */\n        function (reqInfo) {\n            var _this = this;\n            var command = reqInfo.collectionName.toLowerCase();\n            var method = reqInfo.method;\n            var resOptions = {\n                url: reqInfo.url\n            };\n            switch (command) {\n                case 'resetdb':\n                    resOptions.status = STATUS.NO_CONTENT;\n                    return this.resetDb(reqInfo).pipe(concatMap(function () { return _this.createResponse$(function () { return resOptions; }, false /* no latency delay */); }));\n                case 'config':\n                    if (method === 'get') {\n                        resOptions.status = STATUS.OK;\n                        resOptions.body = this.clone(this.config);\n                        // any other HTTP method is assumed to be a config update\n                    }\n                    else {\n                        var body = this.getJsonBody(reqInfo.req);\n                        Object.assign(this.config, body);\n                        this.passThruBackend = undefined; // re-create when needed\n                        resOptions.status = STATUS.NO_CONTENT;\n                    }\n                    break;\n                default:\n                    resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\n            }\n            return this.createResponse$(function () { return resOptions; }, false /* no latency delay */);\n        };\n    BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\n        return {\n            body: { error: \"\" + message },\n            url: url,\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n            status: status\n        };\n    };\n    /**\n     * Create a cold response Observable from a factory for ResponseOptions\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n     * @param withDelay - if true (default), add simulated latency delay from configuration\n     */\n    /**\n       * Create a cold response Observable from a factory for ResponseOptions\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       * @param withDelay - if true (default), add simulated latency delay from configuration\n       */\n    BackendService.prototype.createResponse$ = /**\n       * Create a cold response Observable from a factory for ResponseOptions\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       * @param withDelay - if true (default), add simulated latency delay from configuration\n       */\n        function (resOptionsFactory, withDelay) {\n            if (withDelay === void 0) {\n                withDelay = true;\n            }\n            var resOptions$ = this.createResponseOptions$(resOptionsFactory);\n            var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n            return withDelay ? this.addDelay(resp$) : resp$;\n        };\n    /**\n     * Create a cold Observable of ResponseOptions.\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n     */\n    /**\n       * Create a cold Observable of ResponseOptions.\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       */\n    BackendService.prototype.createResponseOptions$ = /**\n       * Create a cold Observable of ResponseOptions.\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       */\n        function (resOptionsFactory) {\n            var _this = this;\n            return new Observable(function (responseObserver) {\n                var resOptions;\n                try {\n                    resOptions = resOptionsFactory();\n                }\n                catch (error) {\n                    var err = error.message || error;\n                    resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n                }\n                var status = resOptions.status;\n                try {\n                    resOptions.statusText = getStatusText(status);\n                }\n                catch (e) {\n                    /* ignore failure */\n                }\n                if (isSuccess(status)) {\n                    responseObserver.next(resOptions);\n                    responseObserver.complete();\n                }\n                else {\n                    responseObserver.error(resOptions);\n                }\n                return function () { }; // unsubscribe function\n            });\n        };\n    BackendService.prototype.delete = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, url = _a.url;\n        // tslint:disable-next-line:triple-equals\n        if (id == undefined) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\n        }\n        var exists = this.removeById(collection, id);\n        return {\n            headers: headers,\n            status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n        };\n    };\n    /**\n     * Find first instance of item in collection by `item.id`\n     * @param collection\n     * @param id\n     */\n    /**\n       * Find first instance of item in collection by `item.id`\n       * @param collection\n       * @param id\n       */\n    BackendService.prototype.findById = /**\n       * Find first instance of item in collection by `item.id`\n       * @param collection\n       * @param id\n       */\n        function (collection, id) {\n            return collection.find(function (item) { return item.id === id; });\n        };\n    /**\n     * Generate the next available id for item in this collection\n     * Use method from `inMemDbService` if it exists and returns a value,\n     * else delegates to `genIdDefault`.\n     * @param collection - collection of items with `id` key property\n     */\n    /**\n       * Generate the next available id for item in this collection\n       * Use method from `inMemDbService` if it exists and returns a value,\n       * else delegates to `genIdDefault`.\n       * @param collection - collection of items with `id` key property\n       */\n    BackendService.prototype.genId = /**\n       * Generate the next available id for item in this collection\n       * Use method from `inMemDbService` if it exists and returns a value,\n       * else delegates to `genIdDefault`.\n       * @param collection - collection of items with `id` key property\n       */\n        function (collection, collectionName) {\n            var genId = this.bind('genId');\n            if (genId) {\n                var id = genId(collection, collectionName);\n                // tslint:disable-next-line:triple-equals\n                if (id != undefined) {\n                    return id;\n                }\n            }\n            return this.genIdDefault(collection, collectionName);\n        };\n    /**\n     * Default generator of the next available id for item in this collection\n     * This default implementation works only for numeric ids.\n     * @param collection - collection of items with `id` key property\n     * @param collectionName - name of the collection\n     */\n    /**\n       * Default generator of the next available id for item in this collection\n       * This default implementation works only for numeric ids.\n       * @param collection - collection of items with `id` key property\n       * @param collectionName - name of the collection\n       */\n    BackendService.prototype.genIdDefault = /**\n       * Default generator of the next available id for item in this collection\n       * This default implementation works only for numeric ids.\n       * @param collection - collection of items with `id` key property\n       * @param collectionName - name of the collection\n       */\n        function (collection, collectionName) {\n            if (!this.isCollectionIdNumeric(collection, collectionName)) {\n                throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\n            }\n            var maxId = 0;\n            collection.reduce(function (prev, item) {\n                maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n            }, undefined);\n            return maxId + 1;\n        };\n    BackendService.prototype.get = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, query = _a.query, url = _a.url;\n        var data = collection;\n        // tslint:disable-next-line:triple-equals\n        if (id != undefined && id !== '') {\n            data = this.findById(collection, id);\n        }\n        else if (query) {\n            data = this.applyQuery(collection, query);\n        }\n        if (!data) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\n        }\n        return {\n            body: this.bodify(this.clone(data)),\n            headers: headers,\n            status: STATUS.OK\n        };\n    };\n    /**\n     * Get location info from a url, even on server where `document` is not defined\n     */\n    /**\n       * Get location info from a url, even on server where `document` is not defined\n       */\n    BackendService.prototype.getLocation = /**\n       * Get location info from a url, even on server where `document` is not defined\n       */\n        function (url) {\n            if (!url.startsWith('http')) {\n                // get the document iff running in browser\n                var doc = (typeof document === 'undefined') ? undefined : document;\n                // add host info to url before parsing.  Use a fake host when not in browser.\n                var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n                url = url.startsWith('/') ? base + url : base + '/' + url;\n            }\n            return parseUri(url);\n        };\n    ;\n    /**\n     * get or create the function that passes unhandled requests\n     * through to the \"real\" backend.\n     */\n    /**\n       * get or create the function that passes unhandled requests\n       * through to the \"real\" backend.\n       */\n    BackendService.prototype.getPassThruBackend = /**\n       * get or create the function that passes unhandled requests\n       * through to the \"real\" backend.\n       */\n        function () {\n            return this.passThruBackend ?\n                this.passThruBackend :\n                this.passThruBackend = this.createPassThruBackend();\n        };\n    /**\n     * Get utility methods from this service instance.\n     * Useful within an HTTP method override\n     */\n    /**\n       * Get utility methods from this service instance.\n       * Useful within an HTTP method override\n       */\n    BackendService.prototype.getRequestInfoUtils = /**\n       * Get utility methods from this service instance.\n       * Useful within an HTTP method override\n       */\n        function () {\n            var _this = this;\n            return {\n                createResponse$: this.createResponse$.bind(this),\n                findById: this.findById.bind(this),\n                isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n                getConfig: function () { return _this.config; },\n                getDb: function () { return _this.db; },\n                getJsonBody: this.getJsonBody.bind(this),\n                getLocation: this.getLocation.bind(this),\n                getPassThruBackend: this.getPassThruBackend.bind(this),\n                parseRequestUrl: this.parseRequestUrl.bind(this),\n            };\n        };\n    BackendService.prototype.indexOf = function (collection, id) {\n        return collection.findIndex(function (item) { return item.id === id; });\n    };\n    /** Parse the id as a number. Return original value if not a number. */\n    /** Parse the id as a number. Return original value if not a number. */\n    BackendService.prototype.parseId = /** Parse the id as a number. Return original value if not a number. */\n        function (collection, collectionName, id) {\n            if (!this.isCollectionIdNumeric(collection, collectionName)) {\n                // Can't confirm that `id` is a numeric type; don't parse as a number\n                // or else `'42'` -> `42` and _get by id_ fails.\n                return id;\n            }\n            var idNum = parseFloat(id);\n            return isNaN(idNum) ? id : idNum;\n        };\n    /**\n     * return true if can determine that the collection's `item.id` is a number\n     * This implementation can't tell if the collection is empty so it assumes NO\n     * */\n    /**\n       * return true if can determine that the collection's `item.id` is a number\n       * This implementation can't tell if the collection is empty so it assumes NO\n       * */\n    BackendService.prototype.isCollectionIdNumeric = /**\n       * return true if can determine that the collection's `item.id` is a number\n       * This implementation can't tell if the collection is empty so it assumes NO\n       * */\n        function (collection, collectionName) {\n            // collectionName not used now but override might maintain collection type information\n            // so that it could know the type of the `id` even when the collection is empty.\n            return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n        };\n    /**\n     * Parses the request URL into a `ParsedRequestUrl` object.\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n     *\n     * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n     *   When apiBase=undefined and url='http://localhost/api/collection/42'\n     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n     *   When apiBase='/' and url='http://localhost/collection'\n     *     {base: '/', collectionName: 'collection', id: undefined, ...}\n     *\n     * The actual api base segment values are ignored. Only the number of segments matters.\n     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n     *\n     * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n     */\n    /**\n       * Parses the request URL into a `ParsedRequestUrl` object.\n       * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n       *\n       * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n       *   When apiBase=undefined and url='http://localhost/api/collection/42'\n       *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n       *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n       *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n       *   When apiBase='/' and url='http://localhost/collection'\n       *     {base: '/', collectionName: 'collection', id: undefined, ...}\n       *\n       * The actual api base segment values are ignored. Only the number of segments matters.\n       * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n       *\n       * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n       */\n    BackendService.prototype.parseRequestUrl = /**\n       * Parses the request URL into a `ParsedRequestUrl` object.\n       * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n       *\n       * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n       *   When apiBase=undefined and url='http://localhost/api/collection/42'\n       *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n       *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n       *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n       *   When apiBase='/' and url='http://localhost/collection'\n       *     {base: '/', collectionName: 'collection', id: undefined, ...}\n       *\n       * The actual api base segment values are ignored. Only the number of segments matters.\n       * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n       *\n       * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n       */\n        function (url) {\n            try {\n                var loc = this.getLocation(url);\n                var drop = this.config.rootPath.length;\n                var urlRoot = '';\n                if (loc.host !== this.config.host) {\n                    // url for a server on a different host!\n                    // assume it's collection is actually here too.\n                    drop = 1; // the leading slash\n                    urlRoot = loc.protocol + '//' + loc.host + '/';\n                }\n                var path = loc.path.substring(drop);\n                var pathSegments = path.split('/');\n                var segmentIx = 0;\n                // apiBase: the front part of the path devoted to getting to the api route\n                // Assumes first path segment if no config.apiBase\n                // else ignores as many path segments as are in config.apiBase\n                // Does NOT care what the api base chars actually are.\n                var apiBase = void 0;\n                // tslint:disable-next-line:triple-equals\n                if (this.config.apiBase == undefined) {\n                    apiBase = pathSegments[segmentIx++];\n                }\n                else {\n                    apiBase = removeTrailingSlash(this.config.apiBase.trim());\n                    if (apiBase) {\n                        segmentIx = apiBase.split('/').length;\n                    }\n                    else {\n                        segmentIx = 0; // no api base at all; unwise but allowed.\n                    }\n                }\n                apiBase += '/';\n                var collectionName = pathSegments[segmentIx++];\n                // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n                collectionName = collectionName && collectionName.split('.')[0];\n                var id = pathSegments[segmentIx++];\n                var query = this.createQueryMap(loc.query);\n                var resourceUrl = urlRoot + apiBase + collectionName + '/';\n                return { apiBase: apiBase, collectionName: collectionName, id: id, query: query, resourceUrl: resourceUrl };\n            }\n            catch (err) {\n                var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\n                throw new Error(msg);\n            }\n        };\n    // Create entity\n    // Can update an existing entity too if post409 is false.\n    // Create entity\n    // Can update an existing entity too if post409 is false.\n    BackendService.prototype.post =\n        // Create entity\n        // Can update an existing entity too if post409 is false.\n        function (_a) {\n            var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl, url = _a.url;\n            var item = this.clone(this.getJsonBody(req));\n            // tslint:disable-next-line:triple-equals\n            if (item.id == undefined) {\n                try {\n                    item.id = id || this.genId(collection, collectionName);\n                }\n                catch (err) {\n                    var emsg = err.message || '';\n                    if (/id type is non-numeric/.test(emsg)) {\n                        return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n                    }\n                    else {\n                        console.error(err);\n                        return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\n                    }\n                }\n            }\n            if (id && id !== item.id) {\n                return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\n            }\n            else {\n                id = item.id;\n            }\n            var existingIx = this.indexOf(collection, id);\n            var body = this.bodify(item);\n            if (existingIx === -1) {\n                collection.push(item);\n                headers.set('Location', resourceUrl + '/' + id);\n                return { headers: headers, body: body, status: STATUS.CREATED };\n            }\n            else if (this.config.post409) {\n                return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\n            }\n            else {\n                collection[existingIx] = item;\n                return this.config.post204 ?\n                    { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\n                    { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\n            }\n        };\n    // Update existing entity\n    // Can create an entity too if put404 is false.\n    // Update existing entity\n    // Can create an entity too if put404 is false.\n    BackendService.prototype.put =\n        // Update existing entity\n        // Can create an entity too if put404 is false.\n        function (_a) {\n            var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, url = _a.url;\n            var item = this.clone(this.getJsonBody(req));\n            // tslint:disable-next-line:triple-equals\n            if (item.id == undefined) {\n                return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\n            }\n            if (id && id !== item.id) {\n                return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\n            }\n            else {\n                id = item.id;\n            }\n            var existingIx = this.indexOf(collection, id);\n            var body = this.bodify(item);\n            if (existingIx > -1) {\n                collection[existingIx] = item;\n                return this.config.put204 ?\n                    { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\n                    { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\n            }\n            else if (this.config.put404) {\n                // item to update not found; use POST to create new item for this id.\n                return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\n            }\n            else {\n                // create new item for id not found\n                collection.push(item);\n                return { headers: headers, body: body, status: STATUS.CREATED };\n            }\n        };\n    BackendService.prototype.removeById = function (collection, id) {\n        var ix = this.indexOf(collection, id);\n        if (ix > -1) {\n            collection.splice(ix, 1);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Tell your in-mem \"database\" to reset.\n     * returns Observable of the database because resetting it could be async\n     */\n    /**\n       * Tell your in-mem \"database\" to reset.\n       * returns Observable of the database because resetting it could be async\n       */\n    BackendService.prototype.resetDb = /**\n       * Tell your in-mem \"database\" to reset.\n       * returns Observable of the database because resetting it could be async\n       */\n        function (reqInfo) {\n            var _this = this;\n            this.dbReadySubject.next(false);\n            var db = this.inMemDbService.createDb(reqInfo);\n            var db$ = db instanceof Observable ? db :\n                typeof db.then === 'function' ? from(db) :\n                    of(db);\n            db$.pipe(first()).subscribe(function (d) {\n                _this.db = d;\n                _this.dbReadySubject.next(true);\n            });\n            return this.dbReady;\n        };\n    return BackendService;\n}());\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nexport { BackendService };\n\n\n\n",{"version":3,"file":"/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/backend.service.js.post-build-optimizer.js","sourceRoot":"","sources":["/home/grg/ANGULAR/myDashboard/node_modules/angular-in-memory-web-api/backend.service.js.pre-build-optimizer.js"],"names":[],"mappings":"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","sourcesContent":["import { Observable, BehaviorSubject, of, from } from 'rxjs';\nimport { concatMap, first } from 'rxjs/operators';\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\nimport { delayResponse } from './delay-response';\nimport { InMemoryBackendConfig, parseUri, removeTrailingSlash } from './interfaces';\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nvar /**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nBackendService = /** @class */ (function () {\n    function BackendService(inMemDbService, config) {\n        if (config === void 0) { config = {}; }\n        this.inMemDbService = inMemDbService;\n        this.config = new InMemoryBackendConfig();\n        this.requestInfoUtils = this.getRequestInfoUtils();\n        var loc = this.getLocation('/');\n        this.config.host = loc.host; // default to app web server host\n        this.config.rootPath = loc.path; // default to path when app is served (e.g.'/')\n        Object.assign(this.config, config);\n    }\n    Object.defineProperty(BackendService.prototype, \"dbReady\", {\n        ////  protected /////\n        get: function () {\n            if (!this.dbReadySubject) {\n                // first time the service is called.\n                this.dbReadySubject = new BehaviorSubject(false);\n                this.resetDb();\n            }\n            return this.dbReadySubject.asObservable().pipe(first(function (r) { return r; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Process Request and return an Observable of Http Response object\n     * in the manner of a RESTy web api.\n     *\n     * Expect URI pattern in the form :base/:collectionName/:id?\n     * Examples:\n     *   // for store with a 'customers' collection\n     *   GET api/customers          // all customers\n     *   GET api/customers/42       // the character with id=42\n     *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n     *   GET api/customers.json/42  // ignores the \".json\"\n     *\n     * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n     * Examples:\n     *     POST commands/resetDb,\n     *     GET/POST commands/config - get or (re)set the config\n     *\n     *   HTTP overrides:\n     *     If the injected inMemDbService defines an HTTP method (lowercase)\n     *     The request is forwarded to that method as in\n     *     `inMemDbService.get(requestInfo)`\n     *     which must return either an Observable of the response type\n     *     for this http library or null|undefined (which means \"keep processing\").\n     */\n    /**\n       * Process Request and return an Observable of Http Response object\n       * in the manner of a RESTy web api.\n       *\n       * Expect URI pattern in the form :base/:collectionName/:id?\n       * Examples:\n       *   // for store with a 'customers' collection\n       *   GET api/customers          // all customers\n       *   GET api/customers/42       // the character with id=42\n       *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n       *   GET api/customers.json/42  // ignores the \".json\"\n       *\n       * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n       * Examples:\n       *     POST commands/resetDb,\n       *     GET/POST commands/config - get or (re)set the config\n       *\n       *   HTTP overrides:\n       *     If the injected inMemDbService defines an HTTP method (lowercase)\n       *     The request is forwarded to that method as in\n       *     `inMemDbService.get(requestInfo)`\n       *     which must return either an Observable of the response type\n       *     for this http library or null|undefined (which means \"keep processing\").\n       */\n    BackendService.prototype.handleRequest = /**\n       * Process Request and return an Observable of Http Response object\n       * in the manner of a RESTy web api.\n       *\n       * Expect URI pattern in the form :base/:collectionName/:id?\n       * Examples:\n       *   // for store with a 'customers' collection\n       *   GET api/customers          // all customers\n       *   GET api/customers/42       // the character with id=42\n       *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n       *   GET api/customers.json/42  // ignores the \".json\"\n       *\n       * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n       * Examples:\n       *     POST commands/resetDb,\n       *     GET/POST commands/config - get or (re)set the config\n       *\n       *   HTTP overrides:\n       *     If the injected inMemDbService defines an HTTP method (lowercase)\n       *     The request is forwarded to that method as in\n       *     `inMemDbService.get(requestInfo)`\n       *     which must return either an Observable of the response type\n       *     for this http library or null|undefined (which means \"keep processing\").\n       */\n    function (req) {\n        var _this = this;\n        //  handle the request when there is an in-memory database\n        return this.dbReady.pipe(concatMap(function () { return _this.handleRequest_(req); }));\n    };\n    BackendService.prototype.handleRequest_ = function (req) {\n        var _this = this;\n        var url = req.urlWithParams ? req.urlWithParams : req.url;\n        // Try override parser\n        // If no override parser or it returns nothing, use default parser\n        var parser = this.bind('parseRequestUrl');\n        var parsed = (parser && parser(url, this.requestInfoUtils)) ||\n            this.parseRequestUrl(url);\n        var collectionName = parsed.collectionName;\n        var collection = this.db[collectionName];\n        var reqInfo = {\n            req: req,\n            apiBase: parsed.apiBase,\n            collection: collection,\n            collectionName: collectionName,\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n            id: this.parseId(collection, collectionName, parsed.id),\n            method: this.getRequestMethod(req),\n            query: parsed.query,\n            resourceUrl: parsed.resourceUrl,\n            url: url,\n            utils: this.requestInfoUtils\n        };\n        var resOptions;\n        if (/commands\\/?$/i.test(reqInfo.apiBase)) {\n            return this.commands(reqInfo);\n        }\n        var methodInterceptor = this.bind(reqInfo.method);\n        if (methodInterceptor) {\n            // InMemoryDbService intercepts this HTTP method.\n            // if interceptor produced a response, return it.\n            // else InMemoryDbService chose not to intercept; continue processing.\n            var interceptorResponse = methodInterceptor(reqInfo);\n            if (interceptorResponse) {\n                return interceptorResponse;\n            }\n            ;\n        }\n        if (this.db[collectionName]) {\n            // request is for a known collection of the InMemoryDbService\n            return this.createResponse$(function () { return _this.collectionHandler(reqInfo); });\n        }\n        if (this.config.passThruUnknownUrl) {\n            // unknown collection; pass request thru to a \"real\" backend.\n            return this.getPassThruBackend().handle(req);\n        }\n        // 404 - can't handle this request\n        resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Collection '\" + collectionName + \"' not found\");\n        return this.createResponse$(function () { return resOptions; });\n    };\n    /**\n     * Add configured delay to response observable unless delay === 0\n     */\n    /**\n       * Add configured delay to response observable unless delay === 0\n       */\n    BackendService.prototype.addDelay = /**\n       * Add configured delay to response observable unless delay === 0\n       */\n    function (response) {\n        var d = this.config.delay;\n        return d === 0 ? response : delayResponse(response, d || 500);\n    };\n    /**\n     * Apply query/search parameters as a filter over the collection\n     * This impl only supports RegExp queries on string properties of the collection\n     * ANDs the conditions together\n     */\n    /**\n       * Apply query/search parameters as a filter over the collection\n       * This impl only supports RegExp queries on string properties of the collection\n       * ANDs the conditions together\n       */\n    BackendService.prototype.applyQuery = /**\n       * Apply query/search parameters as a filter over the collection\n       * This impl only supports RegExp queries on string properties of the collection\n       * ANDs the conditions together\n       */\n    function (collection, query) {\n        // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n        var conditions = [];\n        var caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n        query.forEach(function (value, name) {\n            value.forEach(function (v) { return conditions.push({ name: name, rx: new RegExp(decodeURI(v), caseSensitive) }); });\n        });\n        var len = conditions.length;\n        if (!len) {\n            return collection;\n        }\n        // AND the RegExp conditions\n        return collection.filter(function (row) {\n            var ok = true;\n            var i = len;\n            while (ok && i) {\n                i -= 1;\n                var cond = conditions[i];\n                ok = cond.rx.test(row[cond.name]);\n            }\n            return ok;\n        });\n    };\n    /**\n     * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n     */\n    /**\n       * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n       */\n    BackendService.prototype.bind = /**\n       * Get a method from the `InMemoryDbService` (if it exists), bound to that service\n       */\n    function (methodName) {\n        var fn = this.inMemDbService[methodName];\n        return fn ? fn.bind(this.inMemDbService) : undefined;\n    };\n    BackendService.prototype.bodify = function (data) {\n        return this.config.dataEncapsulation ? { data: data } : data;\n    };\n    BackendService.prototype.clone = function (data) {\n        return JSON.parse(JSON.stringify(data));\n    };\n    BackendService.prototype.collectionHandler = function (reqInfo) {\n        // const req = reqInfo.req;\n        var resOptions;\n        switch (reqInfo.method) {\n            case 'get':\n                resOptions = this.get(reqInfo);\n                break;\n            case 'post':\n                resOptions = this.post(reqInfo);\n                break;\n            case 'put':\n                resOptions = this.put(reqInfo);\n                break;\n            case 'delete':\n                resOptions = this.delete(reqInfo);\n                break;\n            default:\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n                break;\n        }\n        // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n        var interceptor = this.bind('responseInterceptor');\n        return interceptor ? interceptor(resOptions, reqInfo) : resOptions;\n    };\n    /**\n     * Commands reconfigure the in-memory web api service or extract information from it.\n     * Commands ignore the latency delay and respond ASAP.\n     *\n     * When the last segment of the `apiBase` path is \"commands\",\n     * the `collectionName` is the command.\n     *\n     * Example URLs:\n     *   commands/resetdb (POST) // Reset the \"database\" to its original state\n     *   commands/config (GET)   // Return this service's config object\n     *   commands/config (POST)  // Update the config (e.g. the delay)\n     *\n     * Usage:\n     *   http.post('commands/resetdb', undefined);\n     *   http.get('commands/config');\n     *   http.post('commands/config', '{\"delay\":1000}');\n     */\n    /**\n       * Commands reconfigure the in-memory web api service or extract information from it.\n       * Commands ignore the latency delay and respond ASAP.\n       *\n       * When the last segment of the `apiBase` path is \"commands\",\n       * the `collectionName` is the command.\n       *\n       * Example URLs:\n       *   commands/resetdb (POST) // Reset the \"database\" to its original state\n       *   commands/config (GET)   // Return this service's config object\n       *   commands/config (POST)  // Update the config (e.g. the delay)\n       *\n       * Usage:\n       *   http.post('commands/resetdb', undefined);\n       *   http.get('commands/config');\n       *   http.post('commands/config', '{\"delay\":1000}');\n       */\n    BackendService.prototype.commands = /**\n       * Commands reconfigure the in-memory web api service or extract information from it.\n       * Commands ignore the latency delay and respond ASAP.\n       *\n       * When the last segment of the `apiBase` path is \"commands\",\n       * the `collectionName` is the command.\n       *\n       * Example URLs:\n       *   commands/resetdb (POST) // Reset the \"database\" to its original state\n       *   commands/config (GET)   // Return this service's config object\n       *   commands/config (POST)  // Update the config (e.g. the delay)\n       *\n       * Usage:\n       *   http.post('commands/resetdb', undefined);\n       *   http.get('commands/config');\n       *   http.post('commands/config', '{\"delay\":1000}');\n       */\n    function (reqInfo) {\n        var _this = this;\n        var command = reqInfo.collectionName.toLowerCase();\n        var method = reqInfo.method;\n        var resOptions = {\n            url: reqInfo.url\n        };\n        switch (command) {\n            case 'resetdb':\n                resOptions.status = STATUS.NO_CONTENT;\n                return this.resetDb(reqInfo).pipe(concatMap(function () { return _this.createResponse$(function () { return resOptions; }, false /* no latency delay */); }));\n            case 'config':\n                if (method === 'get') {\n                    resOptions.status = STATUS.OK;\n                    resOptions.body = this.clone(this.config);\n                    // any other HTTP method is assumed to be a config update\n                }\n                else {\n                    var body = this.getJsonBody(reqInfo.req);\n                    Object.assign(this.config, body);\n                    this.passThruBackend = undefined; // re-create when needed\n                    resOptions.status = STATUS.NO_CONTENT;\n                }\n                break;\n            default:\n                resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, \"Unknown command \\\"\" + command + \"\\\"\");\n        }\n        return this.createResponse$(function () { return resOptions; }, false /* no latency delay */);\n    };\n    BackendService.prototype.createErrorResponseOptions = function (url, status, message) {\n        return {\n            body: { error: \"\" + message },\n            url: url,\n            headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n            status: status\n        };\n    };\n    /**\n     * Create a cold response Observable from a factory for ResponseOptions\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n     * @param withDelay - if true (default), add simulated latency delay from configuration\n     */\n    /**\n       * Create a cold response Observable from a factory for ResponseOptions\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       * @param withDelay - if true (default), add simulated latency delay from configuration\n       */\n    BackendService.prototype.createResponse$ = /**\n       * Create a cold response Observable from a factory for ResponseOptions\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       * @param withDelay - if true (default), add simulated latency delay from configuration\n       */\n    function (resOptionsFactory, withDelay) {\n        if (withDelay === void 0) { withDelay = true; }\n        var resOptions$ = this.createResponseOptions$(resOptionsFactory);\n        var resp$ = this.createResponse$fromResponseOptions$(resOptions$);\n        return withDelay ? this.addDelay(resp$) : resp$;\n    };\n    /**\n     * Create a cold Observable of ResponseOptions.\n     * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n     */\n    /**\n       * Create a cold Observable of ResponseOptions.\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       */\n    BackendService.prototype.createResponseOptions$ = /**\n       * Create a cold Observable of ResponseOptions.\n       * @param resOptionsFactory - creates ResponseOptions when observable is subscribed\n       */\n    function (resOptionsFactory) {\n        var _this = this;\n        return new Observable(function (responseObserver) {\n            var resOptions;\n            try {\n                resOptions = resOptionsFactory();\n            }\n            catch (error) {\n                var err = error.message || error;\n                resOptions = _this.createErrorResponseOptions('', STATUS.INTERNAL_SERVER_ERROR, \"\" + err);\n            }\n            var status = resOptions.status;\n            try {\n                resOptions.statusText = getStatusText(status);\n            }\n            catch (e) {\n                /* ignore failure */ \n            }\n            if (isSuccess(status)) {\n                responseObserver.next(resOptions);\n                responseObserver.complete();\n            }\n            else {\n                responseObserver.error(resOptions);\n            }\n            return function () { }; // unsubscribe function\n        });\n    };\n    BackendService.prototype.delete = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, url = _a.url;\n        // tslint:disable-next-line:triple-equals\n        if (id == undefined) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing \\\"\" + collectionName + \"\\\" id\");\n        }\n        var exists = this.removeById(collection, id);\n        return {\n            headers: headers,\n            status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n        };\n    };\n    /**\n     * Find first instance of item in collection by `item.id`\n     * @param collection\n     * @param id\n     */\n    /**\n       * Find first instance of item in collection by `item.id`\n       * @param collection\n       * @param id\n       */\n    BackendService.prototype.findById = /**\n       * Find first instance of item in collection by `item.id`\n       * @param collection\n       * @param id\n       */\n    function (collection, id) {\n        return collection.find(function (item) { return item.id === id; });\n    };\n    /**\n     * Generate the next available id for item in this collection\n     * Use method from `inMemDbService` if it exists and returns a value,\n     * else delegates to `genIdDefault`.\n     * @param collection - collection of items with `id` key property\n     */\n    /**\n       * Generate the next available id for item in this collection\n       * Use method from `inMemDbService` if it exists and returns a value,\n       * else delegates to `genIdDefault`.\n       * @param collection - collection of items with `id` key property\n       */\n    BackendService.prototype.genId = /**\n       * Generate the next available id for item in this collection\n       * Use method from `inMemDbService` if it exists and returns a value,\n       * else delegates to `genIdDefault`.\n       * @param collection - collection of items with `id` key property\n       */\n    function (collection, collectionName) {\n        var genId = this.bind('genId');\n        if (genId) {\n            var id = genId(collection, collectionName);\n            // tslint:disable-next-line:triple-equals\n            if (id != undefined) {\n                return id;\n            }\n        }\n        return this.genIdDefault(collection, collectionName);\n    };\n    /**\n     * Default generator of the next available id for item in this collection\n     * This default implementation works only for numeric ids.\n     * @param collection - collection of items with `id` key property\n     * @param collectionName - name of the collection\n     */\n    /**\n       * Default generator of the next available id for item in this collection\n       * This default implementation works only for numeric ids.\n       * @param collection - collection of items with `id` key property\n       * @param collectionName - name of the collection\n       */\n    BackendService.prototype.genIdDefault = /**\n       * Default generator of the next available id for item in this collection\n       * This default implementation works only for numeric ids.\n       * @param collection - collection of items with `id` key property\n       * @param collectionName - name of the collection\n       */\n    function (collection, collectionName) {\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\n            throw new Error(\"Collection '\" + collectionName + \"' id type is non-numeric or unknown. Can only generate numeric ids.\");\n        }\n        var maxId = 0;\n        collection.reduce(function (prev, item) {\n            maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n        }, undefined);\n        return maxId + 1;\n    };\n    BackendService.prototype.get = function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, query = _a.query, url = _a.url;\n        var data = collection;\n        // tslint:disable-next-line:triple-equals\n        if (id != undefined && id !== '') {\n            data = this.findById(collection, id);\n        }\n        else if (query) {\n            data = this.applyQuery(collection, query);\n        }\n        if (!data) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' with id='\" + id + \"' not found\");\n        }\n        return {\n            body: this.bodify(this.clone(data)),\n            headers: headers,\n            status: STATUS.OK\n        };\n    };\n    /**\n     * Get location info from a url, even on server where `document` is not defined\n     */\n    /**\n       * Get location info from a url, even on server where `document` is not defined\n       */\n    BackendService.prototype.getLocation = /**\n       * Get location info from a url, even on server where `document` is not defined\n       */\n    function (url) {\n        if (!url.startsWith('http')) {\n            // get the document iff running in browser\n            var doc = (typeof document === 'undefined') ? undefined : document;\n            // add host info to url before parsing.  Use a fake host when not in browser.\n            var base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n            url = url.startsWith('/') ? base + url : base + '/' + url;\n        }\n        return parseUri(url);\n    };\n    ;\n    /**\n     * get or create the function that passes unhandled requests\n     * through to the \"real\" backend.\n     */\n    /**\n       * get or create the function that passes unhandled requests\n       * through to the \"real\" backend.\n       */\n    BackendService.prototype.getPassThruBackend = /**\n       * get or create the function that passes unhandled requests\n       * through to the \"real\" backend.\n       */\n    function () {\n        return this.passThruBackend ?\n            this.passThruBackend :\n            this.passThruBackend = this.createPassThruBackend();\n    };\n    /**\n     * Get utility methods from this service instance.\n     * Useful within an HTTP method override\n     */\n    /**\n       * Get utility methods from this service instance.\n       * Useful within an HTTP method override\n       */\n    BackendService.prototype.getRequestInfoUtils = /**\n       * Get utility methods from this service instance.\n       * Useful within an HTTP method override\n       */\n    function () {\n        var _this = this;\n        return {\n            createResponse$: this.createResponse$.bind(this),\n            findById: this.findById.bind(this),\n            isCollectionIdNumeric: this.isCollectionIdNumeric.bind(this),\n            getConfig: function () { return _this.config; },\n            getDb: function () { return _this.db; },\n            getJsonBody: this.getJsonBody.bind(this),\n            getLocation: this.getLocation.bind(this),\n            getPassThruBackend: this.getPassThruBackend.bind(this),\n            parseRequestUrl: this.parseRequestUrl.bind(this),\n        };\n    };\n    BackendService.prototype.indexOf = function (collection, id) {\n        return collection.findIndex(function (item) { return item.id === id; });\n    };\n    /** Parse the id as a number. Return original value if not a number. */\n    /** Parse the id as a number. Return original value if not a number. */\n    BackendService.prototype.parseId = /** Parse the id as a number. Return original value if not a number. */\n    function (collection, collectionName, id) {\n        if (!this.isCollectionIdNumeric(collection, collectionName)) {\n            // Can't confirm that `id` is a numeric type; don't parse as a number\n            // or else `'42'` -> `42` and _get by id_ fails.\n            return id;\n        }\n        var idNum = parseFloat(id);\n        return isNaN(idNum) ? id : idNum;\n    };\n    /**\n     * return true if can determine that the collection's `item.id` is a number\n     * This implementation can't tell if the collection is empty so it assumes NO\n     * */\n    /**\n       * return true if can determine that the collection's `item.id` is a number\n       * This implementation can't tell if the collection is empty so it assumes NO\n       * */\n    BackendService.prototype.isCollectionIdNumeric = /**\n       * return true if can determine that the collection's `item.id` is a number\n       * This implementation can't tell if the collection is empty so it assumes NO\n       * */\n    function (collection, collectionName) {\n        // collectionName not used now but override might maintain collection type information\n        // so that it could know the type of the `id` even when the collection is empty.\n        return !!(collection && collection[0]) && typeof collection[0].id === 'number';\n    };\n    /**\n     * Parses the request URL into a `ParsedRequestUrl` object.\n     * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n     *\n     * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n     *   When apiBase=undefined and url='http://localhost/api/collection/42'\n     *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n     *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n     *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n     *   When apiBase='/' and url='http://localhost/collection'\n     *     {base: '/', collectionName: 'collection', id: undefined, ...}\n     *\n     * The actual api base segment values are ignored. Only the number of segments matters.\n     * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n     *\n     * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n     */\n    /**\n       * Parses the request URL into a `ParsedRequestUrl` object.\n       * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n       *\n       * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n       *   When apiBase=undefined and url='http://localhost/api/collection/42'\n       *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n       *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n       *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n       *   When apiBase='/' and url='http://localhost/collection'\n       *     {base: '/', collectionName: 'collection', id: undefined, ...}\n       *\n       * The actual api base segment values are ignored. Only the number of segments matters.\n       * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n       *\n       * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n       */\n    BackendService.prototype.parseRequestUrl = /**\n       * Parses the request URL into a `ParsedRequestUrl` object.\n       * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n       *\n       * Configuring the `apiBase` yields the most interesting changes to `parseRequestUrl` behavior:\n       *   When apiBase=undefined and url='http://localhost/api/collection/42'\n       *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n       *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n       *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n       *   When apiBase='/' and url='http://localhost/collection'\n       *     {base: '/', collectionName: 'collection', id: undefined, ...}\n       *\n       * The actual api base segment values are ignored. Only the number of segments matters.\n       * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n       *\n       * To replace this default method, assign your alternative to your InMemDbService['parseRequestUrl']\n       */\n    function (url) {\n        try {\n            var loc = this.getLocation(url);\n            var drop = this.config.rootPath.length;\n            var urlRoot = '';\n            if (loc.host !== this.config.host) {\n                // url for a server on a different host!\n                // assume it's collection is actually here too.\n                drop = 1; // the leading slash\n                urlRoot = loc.protocol + '//' + loc.host + '/';\n            }\n            var path = loc.path.substring(drop);\n            var pathSegments = path.split('/');\n            var segmentIx = 0;\n            // apiBase: the front part of the path devoted to getting to the api route\n            // Assumes first path segment if no config.apiBase\n            // else ignores as many path segments as are in config.apiBase\n            // Does NOT care what the api base chars actually are.\n            var apiBase = void 0;\n            // tslint:disable-next-line:triple-equals\n            if (this.config.apiBase == undefined) {\n                apiBase = pathSegments[segmentIx++];\n            }\n            else {\n                apiBase = removeTrailingSlash(this.config.apiBase.trim());\n                if (apiBase) {\n                    segmentIx = apiBase.split('/').length;\n                }\n                else {\n                    segmentIx = 0; // no api base at all; unwise but allowed.\n                }\n            }\n            apiBase += '/';\n            var collectionName = pathSegments[segmentIx++];\n            // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n            collectionName = collectionName && collectionName.split('.')[0];\n            var id = pathSegments[segmentIx++];\n            var query = this.createQueryMap(loc.query);\n            var resourceUrl = urlRoot + apiBase + collectionName + '/';\n            return { apiBase: apiBase, collectionName: collectionName, id: id, query: query, resourceUrl: resourceUrl };\n        }\n        catch (err) {\n            var msg = \"unable to parse url '\" + url + \"'; original error: \" + err.message;\n            throw new Error(msg);\n        }\n    };\n    // Create entity\n    // Can update an existing entity too if post409 is false.\n    // Create entity\n    // Can update an existing entity too if post409 is false.\n    BackendService.prototype.post = \n    // Create entity\n    // Can update an existing entity too if post409 is false.\n    function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, resourceUrl = _a.resourceUrl, url = _a.url;\n        var item = this.clone(this.getJsonBody(req));\n        // tslint:disable-next-line:triple-equals\n        if (item.id == undefined) {\n            try {\n                item.id = id || this.genId(collection, collectionName);\n            }\n            catch (err) {\n                var emsg = err.message || '';\n                if (/id type is non-numeric/.test(emsg)) {\n                    return this.createErrorResponseOptions(url, STATUS.UNPROCESSABLE_ENTRY, emsg);\n                }\n                else {\n                    console.error(err);\n                    return this.createErrorResponseOptions(url, STATUS.INTERNAL_SERVER_ERROR, \"Failed to generate new id for '\" + collectionName + \"'\");\n                }\n            }\n        }\n        if (id && id !== item.id) {\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request id does not match item.id\");\n        }\n        else {\n            id = item.id;\n        }\n        var existingIx = this.indexOf(collection, id);\n        var body = this.bodify(item);\n        if (existingIx === -1) {\n            collection.push(item);\n            headers.set('Location', resourceUrl + '/' + id);\n            return { headers: headers, body: body, status: STATUS.CREATED };\n        }\n        else if (this.config.post409) {\n            return this.createErrorResponseOptions(url, STATUS.CONFLICT, \"'\" + collectionName + \"' item with id='\" + id + \" exists and may not be updated with POST; use PUT instead.\");\n        }\n        else {\n            collection[existingIx] = item;\n            return this.config.post204 ?\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\n        }\n    };\n    // Update existing entity\n    // Can create an entity too if put404 is false.\n    // Update existing entity\n    // Can create an entity too if put404 is false.\n    BackendService.prototype.put = \n    // Update existing entity\n    // Can create an entity too if put404 is false.\n    function (_a) {\n        var collection = _a.collection, collectionName = _a.collectionName, headers = _a.headers, id = _a.id, req = _a.req, url = _a.url;\n        var item = this.clone(this.getJsonBody(req));\n        // tslint:disable-next-line:triple-equals\n        if (item.id == undefined) {\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"Missing '\" + collectionName + \"' id\");\n        }\n        if (id && id !== item.id) {\n            return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, \"Request for '\" + collectionName + \"' id does not match item.id\");\n        }\n        else {\n            id = item.id;\n        }\n        var existingIx = this.indexOf(collection, id);\n        var body = this.bodify(item);\n        if (existingIx > -1) {\n            collection[existingIx] = item;\n            return this.config.put204 ?\n                { headers: headers, status: STATUS.NO_CONTENT } : // successful; no content\n                { headers: headers, body: body, status: STATUS.OK }; // successful; return entity\n        }\n        else if (this.config.put404) {\n            // item to update not found; use POST to create new item for this id.\n            return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, \"'\" + collectionName + \"' item with id='\" + id + \" not found and may not be created with PUT; use POST instead.\");\n        }\n        else {\n            // create new item for id not found\n            collection.push(item);\n            return { headers: headers, body: body, status: STATUS.CREATED };\n        }\n    };\n    BackendService.prototype.removeById = function (collection, id) {\n        var ix = this.indexOf(collection, id);\n        if (ix > -1) {\n            collection.splice(ix, 1);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Tell your in-mem \"database\" to reset.\n     * returns Observable of the database because resetting it could be async\n     */\n    /**\n       * Tell your in-mem \"database\" to reset.\n       * returns Observable of the database because resetting it could be async\n       */\n    BackendService.prototype.resetDb = /**\n       * Tell your in-mem \"database\" to reset.\n       * returns Observable of the database because resetting it could be async\n       */\n    function (reqInfo) {\n        var _this = this;\n        this.dbReadySubject.next(false);\n        var db = this.inMemDbService.createDb(reqInfo);\n        var db$ = db instanceof Observable ? db :\n            typeof db.then === 'function' ? from(db) :\n                of(db);\n        db$.pipe(first()).subscribe(function (d) {\n            _this.db = d;\n            _this.dbReadySubject.next(true);\n        });\n        return this.dbReady;\n    };\n    return BackendService;\n}());\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected `InMemoryDbService` service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nexport { BackendService };\n//# sourceMappingURL=backend.service.js.map"]}]}