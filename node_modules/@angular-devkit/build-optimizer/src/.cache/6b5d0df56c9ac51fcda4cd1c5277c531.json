{"remainingRequest":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/grg/ANGULAR/myDashboard/node_modules/angularfire2/database/observable/fromRef.js","dependencies":[{"path":"/home/grg/ANGULAR/myDashboard/node_modules/angularfire2/database/observable/fromRef.js","mtime":499162500000},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/cache-loader/dist/cjs.js","mtime":1535911065030},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Observable } from 'rxjs';\nimport { map, delay, share } from 'rxjs/operators';\nexport function fromRef(ref, event, listenType) {\n    if (listenType === void 0) {\n        listenType = 'on';\n    }\n    return new Observable(function (subscriber) {\n        var fn = ref[listenType](event, function (snapshot, prevKey) {\n            subscriber.next({ snapshot: snapshot, prevKey: prevKey });\n            if (listenType == 'once') {\n                subscriber.complete();\n            }\n        }, subscriber.error.bind(subscriber));\n        if (listenType == 'on') {\n            return { unsubscribe: function () { ref.off(event, fn); } };\n        }\n        else {\n            return { unsubscribe: function () { } };\n        }\n    }).pipe(map(function (payload) {\n        var snapshot = payload.snapshot, prevKey = payload.prevKey;\n        var key = null;\n        if (snapshot.exists()) {\n            key = snapshot.key;\n        }\n        return { type: event, payload: snapshot, prevKey: prevKey, key: key };\n    }), delay(0), share());\n}\n\n\n\n",{"version":3,"file":"/home/grg/ANGULAR/myDashboard/node_modules/angularfire2/database/observable/fromRef.js.post-build-optimizer.js","sourceRoot":"","sources":["/home/grg/ANGULAR/myDashboard/node_modules/angularfire2/database/observable/fromRef.js.pre-build-optimizer.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACnD,MAAM,kBAAkB,GAAG,EAAE,KAAK,EAAE,UAAU;IAC1C,IAAI,UAAU,KAAK,KAAK,CAAC,EAAE;QAAE,UAAU,GAAG,IAAI,CAAC;KAAE;IACjD,OAAO,IAAI,UAAU,CAAC,UAAU,UAAU;QACtC,IAAI,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,UAAU,QAAQ,EAAE,OAAO;YACvD,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;YAC1D,IAAI,UAAU,IAAI,MAAM,EAAE;gBACtB,UAAU,CAAC,QAAQ,EAAE,CAAC;aACzB;QACL,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACtC,IAAI,UAAU,IAAI,IAAI,EAAE;YACpB,OAAO,EAAE,WAAW,EAAE,cAAc,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC/D;aACI;YACD,OAAO,EAAE,WAAW,EAAE,cAAc,CAAC,EAAE,CAAC;SAC3C;IACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,OAAO;QACzB,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC3D,IAAI,GAAG,GAAG,IAAI,CAAC;QACf,IAAI,QAAQ,CAAC,MAAM,EAAE,EAAE;YACnB,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;SACtB;QACD,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IAC1E,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AAC3B,CAAC;AACD,mCAAmC","sourcesContent":["import { Observable } from 'rxjs';\nimport { map, delay, share } from 'rxjs/operators';\nexport function fromRef(ref, event, listenType) {\n    if (listenType === void 0) { listenType = 'on'; }\n    return new Observable(function (subscriber) {\n        var fn = ref[listenType](event, function (snapshot, prevKey) {\n            subscriber.next({ snapshot: snapshot, prevKey: prevKey });\n            if (listenType == 'once') {\n                subscriber.complete();\n            }\n        }, subscriber.error.bind(subscriber));\n        if (listenType == 'on') {\n            return { unsubscribe: function () { ref.off(event, fn); } };\n        }\n        else {\n            return { unsubscribe: function () { } };\n        }\n    }).pipe(map(function (payload) {\n        var snapshot = payload.snapshot, prevKey = payload.prevKey;\n        var key = null;\n        if (snapshot.exists()) {\n            key = snapshot.key;\n        }\n        return { type: event, payload: snapshot, prevKey: prevKey, key: key };\n    }), delay(0), share());\n}\n//# sourceMappingURL=fromRef.js.map"]}]}