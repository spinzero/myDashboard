{"remainingRequest":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/sidenav.es5.js","dependencies":[{"path":"/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/sidenav.es5.js","mtime":499162500000},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/cache-loader/dist/cjs.js","mtime":1535911065030},{"path":"/home/grg/ANGULAR/myDashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_animations,_angular_cdk_a11y,_angular_cdk_bidi,_angular_cdk_coercion,_angular_cdk_keycodes,_angular_cdk_platform,_angular_cdk_scrolling,_angular_common,_angular_core,rxjs,rxjs_operators,_angular_platform_browser_animations,tslib,_angular_material_core PURE_IMPORTS_END */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatchModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, startWith, take, takeUntil } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { __extends } from 'tslib';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material drawers.\n */\nvar /** @type {?} */ matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: /*@__PURE__*/ trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        /*@__PURE__*/ state('open, open-instant', /*@__PURE__*/ style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        /*@__PURE__*/ state('void', /*@__PURE__*/ style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        /*@__PURE__*/ transition('void => open-instant', /*@__PURE__*/ animate('0ms')),\n        /*@__PURE__*/ transition('void <=> open, open-instant => void', /*@__PURE__*/ animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(\"A drawer was already declared for 'position=\\\"\" + position + \"\\\"'\");\n}\n/**\n * Configures whether drawers should use auto sizing by default.\n */\nvar /** @type {?} */ MAT_DRAWER_DEFAULT_AUTOSIZE = /*@__PURE__*/ new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nvar MatDrawerContent = /** @class */ /*@__PURE__*/ (function () {\n    function MatDrawerContent(_changeDetectorRef, _container) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    /**\n     * @return {?}\n     */\n    MatDrawerContent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._container._contentMarginChanges.subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n            });\n        };\n    return MatDrawerContent;\n}());\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nvar MatDrawer = /** @class */ /*@__PURE__*/ (function () {\n    function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /**\n         * Whether the drawer is initialized. Used for disabling the initial animation.\n         */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._autoFocus = true;\n        /**\n         * Emits whenever the drawer has started animating.\n         */\n        this._animationStarted = new EventEmitter();\n        /**\n         * Current state of the sidenav animation.\n         */\n        this._animationState = 'void';\n        /**\n         * Event emitted when the drawer open state is changed.\n         */\n        this.openedChange =\n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new EventEmitter(/* isAsync */ /* isAsync */ true);\n        /**\n         * Event emitted when the drawer's position changes.\n         */\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this._opened = false;\n        this.openedChange.subscribe(function (opened) {\n            if (opened) {\n                if (_this._doc) {\n                    _this._elementFocusedBeforeDrawerWasOpened = /** @type {?} */ (_this._doc.activeElement);\n                }\n                if (_this._isFocusTrapEnabled && _this._focusTrap) {\n                    _this._trapFocus();\n                }\n            }\n            else {\n                _this._restoreFocus();\n            }\n        });\n        /**\n             * Listen to `keydown` events outside the zone so that change detection is not run every\n             * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n             * and we don't have close disabled.\n             */\n        this._ngZone.runOutsideAngular(function () {\n            fromEvent(_this._elementRef.nativeElement, 'keydown').pipe(filter(function (event) { return event.keyCode === ESCAPE && !_this.disableClose; })).subscribe(function (event) {\n                return _this._ngZone.run(function () {\n                    _this.close();\n                    event.stopPropagation();\n                });\n            });\n        });\n    }\n    Object.defineProperty(MatDrawer.prototype, \"position\", {\n        get: /**\n         * The side that the drawer is attached to.\n         * @return {?}\n         */ function () { return this._position; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            // Make sure we have a valid value.\n            value = value === 'end' ? 'end' : 'start';\n            if (value != this._position) {\n                this._position = value;\n                this.onPositionChanged.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"mode\", {\n        get: /**\n         * Mode of the drawer; one of 'over', 'push' or 'side'.\n         * @return {?}\n         */ function () { return this._mode; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._mode = value;\n            this._modeChanged.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"disableClose\", {\n        get: /**\n         * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n         * @return {?}\n         */ function () { return this._disableClose; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._disableClose = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"autoFocus\", {\n        get: /**\n         * Whether the drawer should focus the first focusable element automatically when opened.\n         * @return {?}\n         */ function () { return this._autoFocus; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._autoFocus = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"_openedStream\", {\n        get: /**\n         * Event emitted when the drawer has been opened.\n         * @return {?}\n         */ function () {\n            return this.openedChange.pipe(filter(function (o) { return o; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"openedStart\", {\n        get: /**\n         * Event emitted when the drawer has started opening.\n         * @return {?}\n         */ function () {\n            return this._animationStarted.pipe(filter(function (e) { return e.fromState !== e.toState && e.toState.indexOf('open') === 0; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"_closedStream\", {\n        get: /**\n         * Event emitted when the drawer has been closed.\n         * @return {?}\n         */ function () {\n            return this.openedChange.pipe(filter(function (o) { return !o; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"closedStart\", {\n        get: /**\n         * Event emitted when the drawer has started closing.\n         * @return {?}\n         */ function () {\n            return this._animationStarted.pipe(filter(function (e) { return e.fromState !== e.toState && e.toState === 'void'; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"_isFocusTrapEnabled\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            return this.opened && this.mode !== 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Traps focus inside the drawer.\n     * @return {?}\n     */\n    MatDrawer.prototype._trapFocus = /**\n     * Traps focus inside the drawer.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.autoFocus) {\n                return;\n            }\n            this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n                // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n                // still works. We need to check that `focus` is a function due to Universal.\n                if (!hasMovedFocus && typeof _this._elementRef.nativeElement.focus === 'function') {\n                    _this._elementRef.nativeElement.focus();\n                }\n            });\n        };\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @return {?}\n     */\n    MatDrawer.prototype._restoreFocus = /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @return {?}\n     */\n        function () {\n            if (!this.autoFocus) {\n                return;\n            }\n            var /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n            if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n                if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n                    this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n                }\n                else {\n                    this._elementRef.nativeElement.blur();\n                }\n            }\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            this._openedVia = null;\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._focusTrap.enabled = this._isFocusTrapEnabled;\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n        function () {\n            // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n            // drawers that are open by default. When we're on the server, we shouldn't enable the\n            // animations, because we don't want the drawer to animate the first time the user sees\n            // the page.\n            if (this._platform.isBrowser) {\n                this._enableAnimations = true;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n        };\n    Object.defineProperty(MatDrawer.prototype, \"opened\", {\n        get: /**\n         * Whether the drawer is opened. We overload this because we trigger an event when it\n         * starts or end.\n         * @return {?}\n         */ function () { return this._opened; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this.toggle(coerceBooleanProperty(value)); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    MatDrawer.prototype.open = /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n        function (openedVia) {\n            return this.toggle(true, openedVia);\n        };\n    /** Close the drawer. */\n    /**\n     * Close the drawer.\n     * @return {?}\n     */\n    MatDrawer.prototype.close = /**\n     * Close the drawer.\n     * @return {?}\n     */\n        function () {\n            return this.toggle(false);\n        };\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    MatDrawer.prototype.toggle = /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n        function (isOpen, openedVia) {\n            var _this = this;\n            if (isOpen === void 0) {\n                isOpen = !this.opened;\n            }\n            if (openedVia === void 0) {\n                openedVia = 'program';\n            }\n            this._opened = isOpen;\n            if (isOpen) {\n                this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n                this._openedVia = openedVia;\n            }\n            else {\n                this._animationState = 'void';\n                this._restoreFocus();\n            }\n            if (this._focusTrap) {\n                this._focusTrap.enabled = this._isFocusTrapEnabled;\n            }\n            return new Promise(function (resolve) {\n                _this.openedChange.pipe(take(1)).subscribe(function (open) { return resolve(open ? 'open' : 'close'); });\n            });\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDrawer.prototype._onAnimationStart = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this._animationStarted.emit(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDrawer.prototype._onAnimationEnd = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var fromState = event.fromState, toState = event.toState;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        };\n    Object.defineProperty(MatDrawer.prototype, \"_width\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MatDrawer;\n}());\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nvar MatDrawerContainer = /** @class */ /*@__PURE__*/ (function () {\n    function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, defaultAutosize, _animationMode) {\n        if (defaultAutosize === void 0) {\n            defaultAutosize = false;\n        }\n        var _this = this;\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /**\n         * Event emitted when the drawer backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits on every ngDoCheck. Used for debouncing reflows.\n         */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n                _this._validateDrawers();\n                _this._updateContentMargins();\n            });\n        }\n        this._autosize = defaultAutosize;\n    }\n    Object.defineProperty(MatDrawerContainer.prototype, \"start\", {\n        /** The drawer child with the `start` position. */\n        get: /**\n         * The drawer child with the `start` position.\n         * @return {?}\n         */ function () { return this._start; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawerContainer.prototype, \"end\", {\n        /** The drawer child with the `end` position. */\n        get: /**\n         * The drawer child with the `end` position.\n         * @return {?}\n         */ function () { return this._end; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawerContainer.prototype, \"autosize\", {\n        get: /**\n         * Whether to automatically resize the container whenever\n         * the size of any of its drawers changes.\n         *\n         * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n         * the drawers on every change detection cycle. Can be configured globally via the\n         * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n         * @return {?}\n         */ function () { return this._autosize; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._autosize = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawerContainer.prototype, \"hasBackdrop\", {\n        get: /**\n         * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n         * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n         * mode as well.\n         * @return {?}\n         */ function () {\n            if (this._backdropOverride == null) {\n                return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n            }\n            return this._backdropOverride;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._drawers.changes.pipe(startWith(null)).subscribe(function () {\n                _this._validateDrawers();\n                _this._drawers.forEach(function (drawer) {\n                    _this._watchDrawerToggle(drawer);\n                    _this._watchDrawerPosition(drawer);\n                    _this._watchDrawerMode(drawer);\n                });\n                if (!_this._drawers.length ||\n                    _this._isDrawerOpen(_this._start) ||\n                    _this._isDrawerOpen(_this._end)) {\n                    _this._updateContentMargins();\n                }\n                _this._changeDetectorRef.markForCheck();\n            });\n            this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed)).subscribe(function () { return _this._updateContentMargins(); });\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._doCheckSubject.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n    /** Calls `open` of both start and end drawers */\n    /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.open = /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n        function () {\n            this._drawers.forEach(function (drawer) { return drawer.open(); });\n        };\n    /** Calls `close` of both start and end drawers */\n    /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.close = /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n        function () {\n            this._drawers.forEach(function (drawer) { return drawer.close(); });\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // If users opted into autosizing, do a check every change detection cycle.\n            if (this._autosize && this._isPushed()) {\n                // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n                this._ngZone.runOutsideAngular(function () { return _this._doCheckSubject.next(); });\n            }\n        };\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerToggle = /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} drawer\n     * @return {?}\n     */\n        function (drawer) {\n            var _this = this;\n            drawer._animationStarted.pipe(takeUntil(this._drawers.changes), filter(function (event) { return event.fromState !== event.toState; }))\n                .subscribe(function (event) {\n                // Set the transition class on the container so that the animations occur. This should not\n                // be set initially because animations should only be triggered via a change in state.\n                if (event.toState !== 'open-instant' && _this._animationMode !== 'NoopAnimations') {\n                    _this._element.nativeElement.classList.add('mat-drawer-transition');\n                }\n                _this._updateContentMargins();\n                _this._changeDetectorRef.markForCheck();\n            });\n            if (drawer.mode !== 'side') {\n                drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n                    return _this._setContainerClass(drawer.opened);\n                });\n            }\n        };\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerPosition = /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @param {?} drawer\n     * @return {?}\n     */\n        function (drawer) {\n            var _this = this;\n            if (!drawer) {\n                return;\n            }\n            // NOTE: We need to wait for the microtask queue to be empty before validating,\n            // since both drawers may be swapping positions at the same time.\n            drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n                _this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n                    _this._validateDrawers();\n                });\n            });\n        };\n    /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerMode = /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @param {?} drawer\n     * @return {?}\n     */\n        function (drawer) {\n            var _this = this;\n            if (drawer) {\n                drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                    .subscribe(function () {\n                    _this._updateContentMargins();\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n    /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._setContainerClass = /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @param {?} isAdd\n     * @return {?}\n     */\n        function (isAdd) {\n            if (isAdd) {\n                this._element.nativeElement.classList.add('mat-drawer-opened');\n            }\n            else {\n                this._element.nativeElement.classList.remove('mat-drawer-opened');\n            }\n        };\n    /**\n     * Validate the state of the drawer children components.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._validateDrawers = /**\n     * Validate the state of the drawer children components.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._start = this._end = null;\n            // Ensure that we have at most one start and one end drawer.\n            this._drawers.forEach(function (drawer) {\n                if (drawer.position == 'end') {\n                    if (_this._end != null) {\n                        throwMatDuplicatedDrawerError('end');\n                    }\n                    _this._end = drawer;\n                }\n                else {\n                    if (_this._start != null) {\n                        throwMatDuplicatedDrawerError('start');\n                    }\n                    _this._start = drawer;\n                }\n            });\n            this._right = this._left = null;\n            // Detect if we're LTR or RTL.\n            if (this._dir && this._dir.value === 'rtl') {\n                this._left = this._end;\n                this._right = this._start;\n            }\n            else {\n                this._left = this._start;\n                this._right = this._end;\n            }\n        };\n    /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isPushed = /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @return {?}\n     */\n        function () {\n            return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n                (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._onBackdropClicked = /**\n     * @return {?}\n     */\n        function () {\n            this.backdropClick.emit();\n            this._closeModalDrawer();\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._closeModalDrawer = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Close all open drawers where closing is not disabled and the mode is not `side`.\n            [this._start, this._end]\n                .filter(function (drawer) { return drawer && !drawer.disableClose && _this._canHaveBackdrop(drawer); })\n                .forEach(function (drawer) { return ((drawer)).close(); });\n        };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isShowingBackdrop = /**\n     * @return {?}\n     */\n        function () {\n            return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n                (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n        };\n    /**\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._canHaveBackdrop = /**\n     * @param {?} drawer\n     * @return {?}\n     */\n        function (drawer) {\n            return drawer.mode !== 'side' || !!this._backdropOverride;\n        };\n    /**\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isDrawerOpen = /**\n     * @param {?} drawer\n     * @return {?}\n     */\n        function (drawer) {\n            return drawer != null && drawer.opened;\n        };\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._updateContentMargins = /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // 1. For drawers in `over` mode, they don't affect the content.\n            // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n            //    left margin (for left drawer) or right margin (for right the drawer).\n            // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n            //    adding to the left or right margin and simultaneously subtracting the same amount of\n            //    margin from the other side.\n            var /** @type {?} */ left = 0;\n            var /** @type {?} */ right = 0;\n            if (this._left && this._left.opened) {\n                if (this._left.mode == 'side') {\n                    left += this._left._width;\n                }\n                else if (this._left.mode == 'push') {\n                    var /** @type {?} */ width = this._left._width;\n                    left += width;\n                    right -= width;\n                }\n            }\n            if (this._right && this._right.opened) {\n                if (this._right.mode == 'side') {\n                    right += this._right._width;\n                }\n                else if (this._right.mode == 'push') {\n                    var /** @type {?} */ width = this._right._width;\n                    right += width;\n                    left -= width;\n                }\n            }\n            // If either `right` or `left` is zero, don't set a style to the element. This\n            // allows users to specify a custom size via CSS class in SSR scenarios where the\n            // measured widths will always be zero. Note that we reset to `null` here, rather\n            // than below, in order to ensure that the types in the `if` below are consistent.\n            left = left || /** @type {?} */ ((null));\n            right = right || /** @type {?} */ ((null));\n            if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n                this._contentMargins = { left: left, right: right };\n                // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n                // to do it only when something changed, otherwise we can end up hitting the zone too often.\n                this._ngZone.run(function () { return _this._contentMarginChanges.next(_this._contentMargins); });\n            }\n        };\n    return MatDrawerContainer;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatSidenavContent = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatSidenavContent, _super);\n    function MatSidenavContent(changeDetectorRef, container) {\n        return _super.call(this, changeDetectorRef, container) || this;\n    }\n    return MatSidenavContent;\n}(MatDrawerContent));\nvar MatSidenav = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatSidenav, _super);\n    function MatSidenav() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._fixedInViewport = false;\n        _this._fixedTopGap = 0;\n        _this._fixedBottomGap = 0;\n        return _this;\n    }\n    Object.defineProperty(MatSidenav.prototype, \"fixedInViewport\", {\n        get: /**\n         * Whether the sidenav is fixed in the viewport.\n         * @return {?}\n         */ function () { return this._fixedInViewport; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._fixedInViewport = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSidenav.prototype, \"fixedTopGap\", {\n        get: /**\n         * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n         * mode.\n         * @return {?}\n         */ function () { return this._fixedTopGap; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._fixedTopGap = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSidenav.prototype, \"fixedBottomGap\", {\n        get: /**\n         * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n         * fixed mode.\n         * @return {?}\n         */ function () { return this._fixedBottomGap; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._fixedBottomGap = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    return MatSidenav;\n}(MatDrawer));\nvar MatSidenavContainer = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatSidenavContainer, _super);\n    function MatSidenavContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatSidenavContainer;\n}(MatDrawerContainer));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatSidenavModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatSidenavModule() {\n    }\n    return MatSidenavModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations };\n\n\n\n",{"version":3,"file":"/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/sidenav.es5.js.post-build-optimizer.js","sourceRoot":"","sources":["/home/grg/ANGULAR/myDashboard/node_modules/@angular/material/esm5/sidenav.es5.js.pre-build-optimizer.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatchModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport { debounceTime, filter, map, startWith, take, takeUntil } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { __extends } from 'tslib';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material drawers.\n */\nvar /** @type {?} */ matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(\"A drawer was already declared for 'position=\\\"\" + position + \"\\\"'\");\n}\n/**\n * Configures whether drawers should use auto sizing by default.\n */\nvar /** @type {?} */ MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nvar MatDrawerContent = /** @class */ (function () {\n    function MatDrawerContent(_changeDetectorRef, _container) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    /**\n     * @return {?}\n     */\n    MatDrawerContent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._container._contentMarginChanges.subscribe(function () {\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    MatDrawerContent.decorators = [\n        { type: Component, args: [{selector: 'mat-drawer-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatDrawerContent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef, },\n        { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(function () { return MatDrawerContainer; }),] },] },\n    ]; };\n    return MatDrawerContent;\n}());\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nvar MatDrawer = /** @class */ (function () {\n    function MatDrawer(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /**\n         * Whether the drawer is initialized. Used for disabling the initial animation.\n         */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._autoFocus = true;\n        /**\n         * Emits whenever the drawer has started animating.\n         */\n        this._animationStarted = new EventEmitter();\n        /**\n         * Current state of the sidenav animation.\n         */\n        this._animationState = 'void';\n        /**\n         * Event emitted when the drawer open state is changed.\n         */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ /* isAsync */ true);\n        /**\n         * Event emitted when the drawer's position changes.\n         */\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this._opened = false;\n        this.openedChange.subscribe(function (opened) {\n            if (opened) {\n                if (_this._doc) {\n                    _this._elementFocusedBeforeDrawerWasOpened = /** @type {?} */ (_this._doc.activeElement);\n                }\n                if (_this._isFocusTrapEnabled && _this._focusTrap) {\n                    _this._trapFocus();\n                }\n            }\n            else {\n                _this._restoreFocus();\n            }\n        });\n        /**\n             * Listen to `keydown` events outside the zone so that change detection is not run every\n             * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n             * and we don't have close disabled.\n             */\n        this._ngZone.runOutsideAngular(function () {\n            fromEvent(_this._elementRef.nativeElement, 'keydown').pipe(filter(function (event) { return event.keyCode === ESCAPE && !_this.disableClose; })).subscribe(function (event) {\n                return _this._ngZone.run(function () {\n                    _this.close();\n                    event.stopPropagation();\n                });\n            });\n        });\n    }\n    Object.defineProperty(MatDrawer.prototype, \"position\", {\n        get: /**\n         * The side that the drawer is attached to.\n         * @return {?}\n         */\n        function () { return this._position; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            // Make sure we have a valid value.\n            value = value === 'end' ? 'end' : 'start';\n            if (value != this._position) {\n                this._position = value;\n                this.onPositionChanged.emit();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"mode\", {\n        get: /**\n         * Mode of the drawer; one of 'over', 'push' or 'side'.\n         * @return {?}\n         */\n        function () { return this._mode; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._mode = value;\n            this._modeChanged.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"disableClose\", {\n        get: /**\n         * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n         * @return {?}\n         */\n        function () { return this._disableClose; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._disableClose = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"autoFocus\", {\n        get: /**\n         * Whether the drawer should focus the first focusable element automatically when opened.\n         * @return {?}\n         */\n        function () { return this._autoFocus; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._autoFocus = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"_openedStream\", {\n        get: /**\n         * Event emitted when the drawer has been opened.\n         * @return {?}\n         */\n        function () {\n            return this.openedChange.pipe(filter(function (o) { return o; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"openedStart\", {\n        get: /**\n         * Event emitted when the drawer has started opening.\n         * @return {?}\n         */\n        function () {\n            return this._animationStarted.pipe(filter(function (e) { return e.fromState !== e.toState && e.toState.indexOf('open') === 0; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"_closedStream\", {\n        get: /**\n         * Event emitted when the drawer has been closed.\n         * @return {?}\n         */\n        function () {\n            return this.openedChange.pipe(filter(function (o) { return !o; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"closedStart\", {\n        get: /**\n         * Event emitted when the drawer has started closing.\n         * @return {?}\n         */\n        function () {\n            return this._animationStarted.pipe(filter(function (e) { return e.fromState !== e.toState && e.toState === 'void'; }), map(function () { }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawer.prototype, \"_isFocusTrapEnabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            return this.opened && this.mode !== 'side';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Traps focus inside the drawer.\n     * @return {?}\n     */\n    MatDrawer.prototype._trapFocus = /**\n     * Traps focus inside the drawer.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.autoFocus) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof _this._elementRef.nativeElement.focus === 'function') {\n                _this._elementRef.nativeElement.focus();\n            }\n        });\n    };\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @return {?}\n     */\n    MatDrawer.prototype._restoreFocus = /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @return {?}\n     */\n    function () {\n        if (!this.autoFocus) {\n            return;\n        }\n        var /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n        if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n            if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n                this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n            }\n            else {\n                this._elementRef.nativeElement.blur();\n            }\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._focusTrap.enabled = this._isFocusTrapEnabled;\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    Object.defineProperty(MatDrawer.prototype, \"opened\", {\n        get: /**\n         * Whether the drawer is opened. We overload this because we trigger an event when it\n         * starts or end.\n         * @return {?}\n         */\n        function () { return this._opened; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.toggle(coerceBooleanProperty(value)); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    MatDrawer.prototype.open = /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    function (openedVia) {\n        return this.toggle(true, openedVia);\n    };\n    /** Close the drawer. */\n    /**\n     * Close the drawer.\n     * @return {?}\n     */\n    MatDrawer.prototype.close = /**\n     * Close the drawer.\n     * @return {?}\n     */\n    function () {\n        return this.toggle(false);\n    };\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    MatDrawer.prototype.toggle = /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    function (isOpen, openedVia) {\n        var _this = this;\n        if (isOpen === void 0) { isOpen = !this.opened; }\n        if (openedVia === void 0) { openedVia = 'program'; }\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            this._restoreFocus();\n        }\n        if (this._focusTrap) {\n            this._focusTrap.enabled = this._isFocusTrapEnabled;\n        }\n        return new Promise(function (resolve) {\n            _this.openedChange.pipe(take(1)).subscribe(function (open) { return resolve(open ? 'open' : 'close'); });\n        });\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDrawer.prototype._onAnimationStart = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this._animationStarted.emit(event);\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatDrawer.prototype._onAnimationEnd = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var fromState = event.fromState, toState = event.toState;\n        if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n            (toState === 'void' && fromState.indexOf('open') === 0)) {\n            this.openedChange.emit(this._opened);\n        }\n    };\n    Object.defineProperty(MatDrawer.prototype, \"_width\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatDrawer.decorators = [\n        { type: Component, args: [{selector: 'mat-drawer',\n                    exportAs: 'matDrawer',\n                    template: '<ng-content></ng-content>',\n                    animations: [matDrawerAnimations.transformDrawer],\n                    host: {\n                        'class': 'mat-drawer',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_onAnimationStart($event)',\n                        '(@transform.done)': '_onAnimationEnd($event)',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        'tabIndex': '-1',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatDrawer.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: FocusTrapFactory, },\n        { type: FocusMonitor, },\n        { type: Platform, },\n        { type: NgZone, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    MatDrawer.propDecorators = {\n        \"position\": [{ type: Input },],\n        \"mode\": [{ type: Input },],\n        \"disableClose\": [{ type: Input },],\n        \"autoFocus\": [{ type: Input },],\n        \"openedChange\": [{ type: Output },],\n        \"_openedStream\": [{ type: Output, args: ['opened',] },],\n        \"openedStart\": [{ type: Output },],\n        \"_closedStream\": [{ type: Output, args: ['closed',] },],\n        \"closedStart\": [{ type: Output },],\n        \"onPositionChanged\": [{ type: Output, args: ['positionChanged',] },],\n        \"opened\": [{ type: Input },],\n    };\n    return MatDrawer;\n}());\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nvar MatDrawerContainer = /** @class */ (function () {\n    function MatDrawerContainer(_dir, _element, _ngZone, _changeDetectorRef, defaultAutosize, _animationMode) {\n        if (defaultAutosize === void 0) { defaultAutosize = false; }\n        var _this = this;\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /**\n         * Event emitted when the drawer backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits on every ngDoCheck. Used for debouncing reflows.\n         */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n                _this._validateDrawers();\n                _this._updateContentMargins();\n            });\n        }\n        this._autosize = defaultAutosize;\n    }\n    Object.defineProperty(MatDrawerContainer.prototype, \"start\", {\n        /** The drawer child with the `start` position. */\n        get: /**\n         * The drawer child with the `start` position.\n         * @return {?}\n         */\n        function () { return this._start; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawerContainer.prototype, \"end\", {\n        /** The drawer child with the `end` position. */\n        get: /**\n         * The drawer child with the `end` position.\n         * @return {?}\n         */\n        function () { return this._end; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawerContainer.prototype, \"autosize\", {\n        get: /**\n         * Whether to automatically resize the container whenever\n         * the size of any of its drawers changes.\n         *\n         * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n         * the drawers on every change detection cycle. Can be configured globally via the\n         * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n         * @return {?}\n         */\n        function () { return this._autosize; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._autosize = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDrawerContainer.prototype, \"hasBackdrop\", {\n        get: /**\n         * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n         * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n         * mode as well.\n         * @return {?}\n         */\n        function () {\n            if (this._backdropOverride == null) {\n                return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n            }\n            return this._backdropOverride;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._drawers.changes.pipe(startWith(null)).subscribe(function () {\n            _this._validateDrawers();\n            _this._drawers.forEach(function (drawer) {\n                _this._watchDrawerToggle(drawer);\n                _this._watchDrawerPosition(drawer);\n                _this._watchDrawerMode(drawer);\n            });\n            if (!_this._drawers.length ||\n                _this._isDrawerOpen(_this._start) ||\n                _this._isDrawerOpen(_this._end)) {\n                _this._updateContentMargins();\n            }\n            _this._changeDetectorRef.markForCheck();\n        });\n        this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)).subscribe(function () { return _this._updateContentMargins(); });\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._doCheckSubject.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /** Calls `open` of both start and end drawers */\n    /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.open = /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n    function () {\n        this._drawers.forEach(function (drawer) { return drawer.open(); });\n    };\n    /** Calls `close` of both start and end drawers */\n    /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.close = /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n    function () {\n        this._drawers.forEach(function (drawer) { return drawer.close(); });\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(function () { return _this._doCheckSubject.next(); });\n        }\n    };\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerToggle = /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @param {?} drawer\n     * @return {?}\n     */\n    function (drawer) {\n        var _this = this;\n        drawer._animationStarted.pipe(takeUntil(this._drawers.changes), filter(function (event) { return event.fromState !== event.toState; }))\n            .subscribe(function (event) {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && _this._animationMode !== 'NoopAnimations') {\n                _this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            _this._updateContentMargins();\n            _this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n                return _this._setContainerClass(drawer.opened);\n            });\n        }\n    };\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerPosition = /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @param {?} drawer\n     * @return {?}\n     */\n    function (drawer) {\n        var _this = this;\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(function () {\n            _this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n                _this._validateDrawers();\n            });\n        });\n    };\n    /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._watchDrawerMode = /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @param {?} drawer\n     * @return {?}\n     */\n    function (drawer) {\n        var _this = this;\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(function () {\n                _this._updateContentMargins();\n                _this._changeDetectorRef.markForCheck();\n            });\n        }\n    };\n    /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @param {?} isAdd\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._setContainerClass = /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (isAdd) {\n        if (isAdd) {\n            this._element.nativeElement.classList.add('mat-drawer-opened');\n        }\n        else {\n            this._element.nativeElement.classList.remove('mat-drawer-opened');\n        }\n    };\n    /**\n     * Validate the state of the drawer children components.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._validateDrawers = /**\n     * Validate the state of the drawer children components.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(function (drawer) {\n            if (drawer.position == 'end') {\n                if (_this._end != null) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                _this._end = drawer;\n            }\n            else {\n                if (_this._start != null) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                _this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    };\n    /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isPushed = /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @return {?}\n     */\n    function () {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._onBackdropClicked = /**\n     * @return {?}\n     */\n    function () {\n        this.backdropClick.emit();\n        this._closeModalDrawer();\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._closeModalDrawer = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(function (drawer) { return drawer && !drawer.disableClose && _this._canHaveBackdrop(drawer); })\n            .forEach(function (drawer) { return ((drawer)).close(); });\n    };\n    /**\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isShowingBackdrop = /**\n     * @return {?}\n     */\n    function () {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    };\n    /**\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._canHaveBackdrop = /**\n     * @param {?} drawer\n     * @return {?}\n     */\n    function (drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    };\n    /**\n     * @param {?} drawer\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._isDrawerOpen = /**\n     * @param {?} drawer\n     * @return {?}\n     */\n    function (drawer) {\n        return drawer != null && drawer.opened;\n    };\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n    MatDrawerContainer.prototype._updateContentMargins = /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        var /** @type {?} */ left = 0;\n        var /** @type {?} */ right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._width;\n            }\n            else if (this._left.mode == 'push') {\n                var /** @type {?} */ width = this._left._width;\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._width;\n            }\n            else if (this._right.mode == 'push') {\n                var /** @type {?} */ width = this._right._width;\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || /** @type {?} */ ((null));\n        right = right || /** @type {?} */ ((null));\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left: left, right: right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(function () { return _this._contentMarginChanges.next(_this._contentMargins); });\n        }\n    };\n    MatDrawerContainer.decorators = [\n        { type: Component, args: [{selector: 'mat-drawer-container',\n                    exportAs: 'matDrawerContainer',\n                    template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-drawer\\\"></ng-content><ng-content select=\\\"mat-drawer-content\\\"></ng-content><mat-drawer-content *ngIf=\\\"!_content\\\" cdkScrollable><ng-content></ng-content></mat-drawer-content>\",\n                    styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-fixed{position:fixed}\"],\n                    host: {\n                        'class': 'mat-drawer-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatDrawerContainer.ctorParameters = function () { return [\n        { type: Directionality, decorators: [{ type: Optional },] },\n        { type: ElementRef, },\n        { type: NgZone, },\n        { type: ChangeDetectorRef, },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] },] },\n    ]; };\n    MatDrawerContainer.propDecorators = {\n        \"_drawers\": [{ type: ContentChildren, args: [MatDrawer,] },],\n        \"_content\": [{ type: ContentChild, args: [MatDrawerContent,] },],\n        \"autosize\": [{ type: Input },],\n        \"hasBackdrop\": [{ type: Input },],\n        \"backdropClick\": [{ type: Output },],\n        \"scrollable\": [{ type: ViewChild, args: [CdkScrollable,] },],\n    };\n    return MatDrawerContainer;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatSidenavContent = /** @class */ (function (_super) {\n    __extends(MatSidenavContent, _super);\n    function MatSidenavContent(changeDetectorRef, container) {\n        return _super.call(this, changeDetectorRef, container) || this;\n    }\n    MatSidenavContent.decorators = [\n        { type: Component, args: [{selector: 'mat-sidenav-content',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        'class': 'mat-drawer-content mat-sidenav-content',\n                        '[style.margin-left.px]': '_container._contentMargins.left',\n                        '[style.margin-right.px]': '_container._contentMargins.right',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatSidenavContent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef, },\n        { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(function () { return MatSidenavContainer; }),] },] },\n    ]; };\n    return MatSidenavContent;\n}(MatDrawerContent));\nvar MatSidenav = /** @class */ (function (_super) {\n    __extends(MatSidenav, _super);\n    function MatSidenav() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._fixedInViewport = false;\n        _this._fixedTopGap = 0;\n        _this._fixedBottomGap = 0;\n        return _this;\n    }\n    Object.defineProperty(MatSidenav.prototype, \"fixedInViewport\", {\n        get: /**\n         * Whether the sidenav is fixed in the viewport.\n         * @return {?}\n         */\n        function () { return this._fixedInViewport; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._fixedInViewport = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSidenav.prototype, \"fixedTopGap\", {\n        get: /**\n         * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n         * mode.\n         * @return {?}\n         */\n        function () { return this._fixedTopGap; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._fixedTopGap = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSidenav.prototype, \"fixedBottomGap\", {\n        get: /**\n         * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n         * fixed mode.\n         * @return {?}\n         */\n        function () { return this._fixedBottomGap; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._fixedBottomGap = coerceNumberProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    MatSidenav.decorators = [\n        { type: Component, args: [{selector: 'mat-sidenav',\n                    exportAs: 'matSidenav',\n                    template: '<ng-content></ng-content>',\n                    animations: [matDrawerAnimations.transformDrawer],\n                    host: {\n                        'class': 'mat-drawer mat-sidenav',\n                        'tabIndex': '-1',\n                        '[@transform]': '_animationState',\n                        '(@transform.start)': '_onAnimationStart($event)',\n                        '(@transform.done)': '_onAnimationEnd($event)',\n                        // must prevent the browser from aligning text based on value\n                        '[attr.align]': 'null',\n                        '[class.mat-drawer-end]': 'position === \"end\"',\n                        '[class.mat-drawer-over]': 'mode === \"over\"',\n                        '[class.mat-drawer-push]': 'mode === \"push\"',\n                        '[class.mat-drawer-side]': 'mode === \"side\"',\n                        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatSidenav.propDecorators = {\n        \"fixedInViewport\": [{ type: Input },],\n        \"fixedTopGap\": [{ type: Input },],\n        \"fixedBottomGap\": [{ type: Input },],\n    };\n    return MatSidenav;\n}(MatDrawer));\nvar MatSidenavContainer = /** @class */ (function (_super) {\n    __extends(MatSidenavContainer, _super);\n    function MatSidenavContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatSidenavContainer.decorators = [\n        { type: Component, args: [{selector: 'mat-sidenav-container',\n                    exportAs: 'matSidenavContainer',\n                    template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\" [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div><ng-content select=\\\"mat-sidenav\\\"></ng-content><ng-content select=\\\"mat-sidenav-content\\\"></ng-content><mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable><ng-content></ng-content></mat-sidenav-content>\",\n                    styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-fixed{position:fixed}\"],\n                    host: {\n                        'class': 'mat-drawer-container mat-sidenav-container',\n                        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    /** @nocollapse */\n    MatSidenavContainer.propDecorators = {\n        \"_drawers\": [{ type: ContentChildren, args: [MatSidenav,] },],\n        \"_content\": [{ type: ContentChild, args: [MatSidenavContent,] },],\n    };\n    return MatSidenavContainer;\n}(MatDrawerContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatSidenavModule = /** @class */ (function () {\n    function MatSidenavModule() {\n    }\n    MatSidenavModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        MatCommonModule,\n                        ScrollDispatchModule,\n                        PlatformModule,\n                    ],\n                    exports: [\n                        MatCommonModule,\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                    declarations: [\n                        MatDrawer,\n                        MatDrawerContainer,\n                        MatDrawerContent,\n                        MatSidenav,\n                        MatSidenavContainer,\n                        MatSidenavContent,\n                    ],\n                },] },\n    ];\n    return MatSidenavModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatSidenavModule, throwMatDuplicatedDrawerError, MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawerContent, MatDrawer, MatDrawerContainer, MatSidenavContent, MatSidenav, MatSidenavContainer, matDrawerAnimations };\n//# sourceMappingURL=sidenav.es5.js.map\n"]}]}